<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibraryModelado</name>
    </assembly>
    <members>
        <member name="T:Proyecto.LibraryModelado.Engine.EngineGame">
            <summary>
            Motor general del juego.
            Tiene la responsabilidad de conocer y controlar la funcionalidad de los demas motores del juego.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineGame.levelEngines">
            <summary>
            Diccionario en donde se le asocia a un nivel, su respectivo Motor.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineGame.engine">
            <summary>
            Motor generico <see cref="T:Proyecto.LibraryModelado.Engine.IEngine"/>.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineGame.mainPage">
            <summary>
            Pagina principal del juego, el motor la conoce para poder viajar a ella en cualquier momento.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineGame.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineGame.LevelEngines">
            <summary>
            Gets or sets del diccionario de motores y niveles.
            </summary>
            <value>Dictionario de clave <see cref="T:Proyecto.LibraryModelado.Space"/> y valor <see cref="T:Proyecto.LibraryModelado.Engine.IEngine"/>.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineGame.MainPage">
            <summary>
            Gets or sets de la pagina principal.
            </summary>
            <value>Space.</value>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineGame.Asociate(System.Collections.Generic.List{Proyecto.LibraryModelado.IComponent})">
            <summary>
            Metodo responsable de asociarle a cada nivel su respectivo motor, y agregarlo al diccionario this.LevelEngines.
            </summary>
            <param name="componentList"></param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineGame.ButtonGoToMain">
            <summary>
            Sobrescribe el metodo abstracto de <see cref="T:Proyecto.LibraryModelado.Engine.IEngine"/>, en donde ejecuta para cada
            motor de los niveles el metodo de crear un boton que muestre la pagina principal.
            </summary>
        </member>
        <member name="T:Proyecto.LibraryModelado.Engine.EngineScientificExercise1">
            <summary>
            Clase EngineScientificExercise1, responsable de implementar la logica del nivel scientific ejercicio 1.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.level">
            <summary>
            Variable Level utilizada para instanciar un nivel asignable.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.engineGame">
            <summary>
            Instancia unica del motor general.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.Level">
            <summary>
            Gets or sets del nivel asociado a este Motor.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.Feedback">
            <summary>
            Gets or sets de la etiqueta de texto utilizado para especificar si la accion fue correcta o incorrecta.
            </summary>
            <value>Etiqueta <see cref="T:Proyecto.Item.Label"/>.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.LevelCounter">
            <summary>
            Gets or sets de contador utilizado para saber en que pagina del nivel nos encontramos.
            Existen dos paginas en el nivel.
            </summary>
            <value>Int.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.PageCounter">
            <summary>
            Gets or sets de contador utilizado para saber en que operacion de la pagina nos encontramos.
            Existen dos operaciones dentro de la pagina.
            </summary>
            <value>Int.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.ResultsOfPage">
            <summary>
            Gets or sets de los resultados de las sumas de una pagina.
            Por predeterminado los dos parametros son False.
            true = resutlado correcto.
            false = resultado Incorrecto.
            </summary>
            <value>Array de Bools.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.ResultsOfLevel">
            <summary>
            Gets or sets de los resultados del nivel.
            Por predeterminado los dos parametros son False.
            true = Completo una pagina correctamente (los dos parametros de this.ResultsOfPage son true).
            false = No completo las dos operaciones de la pagina.
            </summary>
            <value>Array de Bools.</value>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.VerifyOperation(Proyecto.Item.ScientistLevel.MoneyContainer,Proyecto.Item.ScientistLevel.Money)">
            <summary>
            Metodo responsable de verificar si el objeto tipo Money soltado dentro del MoneyContainer,
            tiene el valor que acepta el container.
            </summary>
            <param name="moneyContainer">Container tipo <see cref="T:Proyecto.Item.ScientistLevel.MoneyContainer"/>.</param>
            <param name="money">DraggableItem tipo <see cref="T:Proyecto.Item.ScientistLevel.Money"/>.</param>
            <returns>Bool si el valor es correcto o no.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.VerifyWinPage">
            <summary>
            Verifica que ambas sumas de la pagina esten hechas correctamente.
            Si fueron realizadas de manera correcta, los parametros del this.ResultsOfLevel pasan a ser true.
            </summary>
            <returns>Bool.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.VerifyWinLevel">
            <summary>
            Verifica que se hayan completado las dos paginas del nivel.
            </summary>
            <returns>Bool.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.VerifyExercise(Proyecto.Item.ScientistLevel.MoneyContainer,Proyecto.Item.ScientistLevel.Money)">
            <summary>
            Metodo que se utiliza para verificar que este correctamente realizada una de las operaciones.
            Si esta bien hecha la operacion, el bool (en this.ResultsOfPage) asociado a la parte del nivel pasa a ser true.
            Al contador se le suma 1, y el container del money, pasa a ser el container en donde es dropeado.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.StartLevel">
            <summary>
            Metodo utilizado para iniciar o reiniciar el motor del juego.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.StartPage">
            <summary>
            Metodo utilizado para iniciar o reiniciar la pagina.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.CreateFeedback">
            <summary>
            Metodo responsable de crear la etiqueta de texto que servira de feedback a las acciones realizadas.
            </summary>
            <returns>Etiqueta <see cref="T:Proyecto.Item.Label"/>.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.GoodFeedback">
            <summary>
            Metodo que asigna al texto un buen feedback. Utilizado cuando la accion realizada es correcta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.BadFeedback">
            <summary>
            Metodo que asigna al texto un mal feedback. Utilizado cuando la accion realizada es incorrecta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.ButtonGoToMain">
            <summary>
            Sobrescribe el metodo abstracto de <see cref="T:Proyecto.LibraryModelado.Engine.IEngine"/>, en donde se recorre el diccionario
            de motores asociados a niveles (EngineGame.LevelEngines), para reconocer en que nivel
            se debe crear el boton que mostrara la pagina principal al ejecutarlo.
            </summary>
        </member>
        <member name="T:Proyecto.LibraryModelado.Engine.EngineScientificExercise2">
            <summary>
            Clase EngineScientificExercise2, responsable de implementar la logica del nivel scientific ejercicio 2.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.level">
            <summary>
            Variable Level utilizada para instanciar un nivel asignable.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.engineGame">
            <summary>
            Instancia unica del motor general.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.Feedback">
            <summary>
            Gets or sets de la etiqueta de texto utilizado para especificar si la accion fue correcta o incorrecta.
            </summary>
            <value>Etiqueta <see cref="T:Proyecto.Item.Label"/>.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.LevelCounter">
            <summary>
            Gets or sets de contador utilizado para saber en que pagina del nivel nos encontramos.
            Existen dos paginas en el nivel.
            </summary>
            <value>Int.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.ResultsOfLevel">
            <summary>
            Gets or sets de los resultados del nivel.
            Por predeterminado los dos parametros son False.
            true = Completo una pagina correctamente.
            false = No contesto bien la pregunta.
            </summary>
            <value>Array de Bools.</value>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.VerifyWinLevel">
            <summary>
            Verifica que se hayan completado las dos paginas del nivel.
            </summary>
            <returns>Bool.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.VerifyQuestion(Proyecto.Item.ScientistLevel.ButtonTrueFalse)">
            <summary>
            Metodo que se utiliza para verificar que se responda la pregunta de forma correcta.
            Si esta bien contestada, el bool de la pagina (this.ResultsOfLevel) pasa a ser true, y el
            level counter suma 1.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.StartLevel">
            <summary>
            Metodo utilizado para iniciar o reiniciar el motor del nivel.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.CreateFeedback">
            <summary>
            Metodo responsable de crear la etiqueta de texto que servira de feedback a las acciones realizadas.
            </summary>
            <returns>Etiqueta <see cref="T:Proyecto.Item.Label"/>.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.GoodFeedback">
            <summary>
            Metodo que asigna al texto un buen feedback. Utilizado cuando la accion realizada es correcta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.BadFeedback">
            <summary>
            Metodo que asigna al texto un mal feedback. Utilizado cuando la accion realizada es incorrecta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.ButtonGoToMain">
            <summary>
            Sobrescribe el metodo abstracto de <see cref="T:Proyecto.LibraryModelado.Engine.IEngine"/>, en donde se recorre el diccionario
            de motores asociados a niveles (EngineGame.LevelEngines), para reconocer en que nivel
            se debe crear el boton que mostrara la pagina principal al ejecutarlo.
            </summary>
        </member>
        <member name="T:Proyecto.LibraryModelado.Engine.EngineScientificExercise3">
            <summary>
            Clase EngineScientificExercise3, responsable de implementar la logica del nivel scientific ejercicio 3.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.level">
            <summary>
            Variable Level utilizada para instanciar un nivel asignable.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.engineGame">
            <summary>
            Instancia unica del motor general.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.Feedback">
            <summary>
            Gets or sets de la etiqueta de texto utilizado para especificar si la accion fue correcta o incorrecta.
            </summary>
            <value>Etiqueta <see cref="T:Proyecto.Item.Label"/>.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.LevelCounter">
            <summary>
            Gets or sets de contador utilizado para saber en que pagina del nivel nos encontramos.
            Existen dos paginas en el nivel.
            </summary>
            <value>Int.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.ResultsOfLevel">
            <summary>
            Gets or sets de los resultados del nivel.
            Por predeterminado los cuatro parametros son False.
            true = Completo una pagina correctamente.
            false = No contesto bien la pregunta.
            </summary>
            <value>Array de Bools.</value>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.VerifyWinLevel">
            <summary>
            Verifica que se hayan completado las cuatro paginas del nivel.
            </summary>
            <returns>Bool.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.VerifyQuestion(Proyecto.Item.ScientistLevel.ButtonTrueFalse)">
            <summary>
            Metodo que se utiliza para verificar la opcion selccionada.
            Si esta bien contestada, el bool de la pagina (this.ResultsOfLevel) pasa a ser true, y el
            level counter suma 1.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.StartLevel">
            <summary>
            Metodo utilizado para iniciar o reiniciar el motor del nivel.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.CreateFeedback">
            <summary>
            Metodo responsable de crear la etiqueta de texto que servira de feedback a las acciones realizadas.
            </summary>
            <returns>Etiqueta <see cref="T:Proyecto.Item.Label"/>.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.GoodFeedback">
            <summary>
            Metodo que asigna al texto un buen feedback. Utilizado cuando la accion realizada es correcta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.BadFeedback">
            <summary>
            Metodo que asigna al texto un mal feedback. Utilizado cuando la accion realizada es incorrecta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.ButtonGoToMain">
            <summary>
            Sobrescribe el metodo abstracto de <see cref="T:Proyecto.LibraryModelado.Engine.IEngine"/>, en donde se recorre el diccionario
            de motores asociados a niveles (EngineGame.LevelEngines), para reconocer en que nivel
            se debe crear el boton que mostrara la pagina principal al ejecutarlo.
            </summary>
        </member>
        <member name="T:Proyecto.LibraryModelado.Engine.IEngine">
            <summary>
            Clase abstracta de motores.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.IEngine.ButtonGoToMain">
            <summary>
            Metodo abstracto de crear un boton que muestra la pagina principal, en cada nivel.
            </summary>
        </member>
        <member name="T:Proyecto.LibraryModelado.Engine.ILevelEngine">
            <summary>
            Interfaz para los motores de los niveles.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.ILevelEngine.CreateFeedback">
            <summary>
            Metodo que crea la etiqueta de texto que servira de feedback a las acciones realizadas.
            </summary>
            <returns>Etiqueta de texto.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.ILevelEngine.GoodFeedback">
            <summary>
            Metodo que asigna al texto un buen feedback. Utilizado cuando la accion realizada es correcta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.ILevelEngine.BadFeedback">
            <summary>
            Metodo que asigna al texto un mal feedback. Utilizado cuando la accion realizada es incorrecta.
            </summary>
        </member>
        <member name="T:Proyecto.LibraryModelado.IButton">
            <summary>
            Interfaz de Botones.
            Esta interfaz es creada, debido a que, cuando en un futuro querramos 
            tener difrentes tipos de botones lo podamos hacer. Por ejemplo, un botón 
            que sea una imagen,un botón contador, botón audio, etc. 
            En este caso, estamos pensando en la funcionalidad futura del código, 
            para cuando debamos ampliar el juego.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.IButton.Click(System.String)">
            <summary>
            Acciones y eventos realizados al hacer click en un boton.
            </summary>
            <param name="text">String.</param>
        </member>
        <member name="T:Proyecto.LibraryModelado.IComponent">
            <summary>
            Interfaz IComponent.
            Todos los objetos creados en el modelado(World, Space, Items) seran de tipo IComponent.
            </summary>
        </member>
        <member name="T:Proyecto.LibraryModelado.Items">
            <summary>
            Clase abstracta de Items en el modelado.
            Utilizamos HERENCIA en este caso debido a que, esta clase será la base de mucho de 
            lo que creado en el proyecto. La clase descendiente (Width, Image, Height, etc.) 
            va a heredar automáticamente los atributos,propiedades de Items. Las clases 
            hijas aumentan la especialización dependiendo de lo que deben hacer cada una 
            de ellas en el juego.
            Implementa la interfaz <see cref="T:Proyecto.LibraryModelado.IComponent"/>.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Items.id">
            <summary>
            Unity ID del item.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Items.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Initializes a new instance of Items.
            </summary>
            <param name="name">Nombre del Item.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del Item.</param>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.Name">
            <summary>
            Gets or sets del nombre del item.
            </summary>
            <value>String nombre del item.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.Level">
            <summary>
            Gets or sets del Nivel al que pertenece el Item.
            </summary>
            <value>Level al que pertence.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.ID">
            <summary>
            Gets or sets del UnityID del Objeto.
            </summary>
            <value>Unity ID.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.PositionX">
            <summary>
            Gets or sets de Posicion en eje Horizontal en pixeles.
            </summary>
            <value>float posicion en eje horizontal.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.PositionY">
            <summary>
            Gets or sets dePosicion en eje Vertical en pixeles.
            </summary>
            <value>float posicion en eje vertical.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.Width">
            <summary>
            Gets or sets de Ancho en Pixeles.
            </summary>
            <value>float ancho en pixeles.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.Height">
            <summary>
            Gets or sets de Altura en pixeles.
            </summary>
            <value>float altura en pixeles.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.Image">
            <summary>
            Gets or sets la imagen del item.
            </summary>
            <value>String path to image.</value>
        </member>
        <member name="T:Proyecto.LibraryModelado.Level">
            <summary>
            Clase responsable de crear Niveles en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Space"/>.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Level.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of level.
            </summary>
            <param name="name">Nombre del nivel.</param>
            <param name="image">Nombre de la imagen de fondo del nivel.</param>
        </member>
        <member name="T:Proyecto.LibraryModelado.Singleton`1">
            <summary>
            El patrón SINGLETON nos permite garantizar la existencia de una sola instancia de clase.
            Además el acceso a esa única instancia tiene que ser global. Esto es de mucha utilidad 
            debido a que, tomamos la decisión de que en nuestro juego haya un único World, por tanto, 
            Singleton es fundamental debido a que se ejecuta una única vez, así nos aseguramos que 
            sólo existe una instancia. En caso de querer llamarlo en cualquier parte del programa 
            se puede realizar.
            </summary>
            <typeparam name="T">Clase Generica.</typeparam>
        </member>
        <member name="F:Proyecto.LibraryModelado.Singleton`1.instance">
            <summary>
            Instancia del singleton.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Singleton`1.Instance">
            <summary>
            Gets de la instancia de la clase T.
            </summary>
            <value>Instance type T.</value>
        </member>
        <member name="T:Proyecto.LibraryModelado.Space">
            <summary>
            Clase abstracta de espacios en el modelado.
            Implementa la interfaz <see cref="T:Proyecto.LibraryModelado.IComponent"/>.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Space.world">
            <summary>
            Nombre del Mundo al que Pertencen.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Space.id">
            <summary>
            Unity ID del Espacio.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Space.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of space.
            </summary>
            <param name="name">Nombre del Espacio.</param>
            <param name="image">Nombre de la imagen de fondo del espacio.</param>
        </member>
        <member name="P:Proyecto.LibraryModelado.Space.Name">
            <summary>
            Gets or sets del nombre del espacio.
            </summary>
            <value>String nombre del espacio.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Space.Image">
            <summary>
            Gets or sets del nombre de la imgen de fondo del espacio.
            </summary>
            <value>string nombre de imagen.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Space.ID">
            <summary>
            Gets or sets del Unity ID del espacio.
            </summary>
            <value>String Unity ID.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Space.Width">
            <summary>
            Gets del ancho del nivel.
            </summary>
            <value>float ancho del nivel.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Space.Height">
            <summary>
            Gets de la altura del nivel.
            </summary>
            <value>float altura del nivel.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Space.World">
            <summary>
            Gets or sets del nombre del mundo al que pertenece.
            </summary>
            <value>String nombre del mundo.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Space.ItemList">
            <summary>
            Gets de la lista de items pertenecientes a un espacio.
            </summary>
            <value>Lista de objetos tipo <see cref="T:Proyecto.LibraryModelado.Items"/>.</value>
        </member>
        <member name="T:Proyecto.LibraryModelado.World">
            <summary>
            Clase responsable de crear objetos mundo.
            Implementa la interfaz <see cref="T:Proyecto.LibraryModelado.IComponent"/>.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.World.name">
            <summary>
            Nombre del Mundo.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.World.#ctor">
            <summary>
            Initializes a new instance of world.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.World.Name">
            <summary>
            Gets or sets del nombre del mundo.
            </summary>
            <value>String nombre del mundo.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.World.SpaceList">
            <summary>
            Gets de la lista de espacios pertenecientes a un mundo.
            </summary>
            <value>Lista de Objetos <see cref="T:Proyecto.LibraryModelado.Space"/>.</value>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryButton">
            <summary>
            Esta clase es la responsable de crear objetos Botones Genéricos.
            Utiliza la interfaz IFactoryComponent.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.name">
            <summary>
            Nombre del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.color">
            <summary>
            Color del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.image">
            <summary>
            Imagen del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.width">
            <summary>
            Ancho del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.height">
            <summary>
            Altura del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.positionX">
            <summary>
            Posicion en X del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.positionY">
            <summary>
            Posicion en Y del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.level">
            <summary>
            Nivel del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryButton.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.Button"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryButtonAudio">
            <summary>
            Esta clase es la responsable de crear objetos BotonAudio.
            Utiliza la interfaz IFactoryComponent.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.name">
            <summary>
            Nombre del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.color">
            <summary>
            Color del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.image">
            <summary>
            Imagen del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.audio">
            <summary>
            Archivo de audio que reproduce el boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.width">
            <summary>
            Ancho del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.height">
            <summary>
            Altura del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.positionX">
            <summary>
            Posicion en X del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.positionY">
            <summary>
            Posicion en Y del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.level">
            <summary>
            Nivel del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryButtonAudio.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.ButtonAudio"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryButtonGoToPage">
            <summary>
            Esta clase es la responsable de crear objetos Boton para ir a la próxima página.
            Utiliza la floaterfaz IFactoryComponent.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.name">
            <summary>
            Nombre del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.color">
            <summary>
            Color del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.image">
            <summary>
            Imagen del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.pageName">
            <summary>
            Pagina de destino del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.width">
            <summary>
            Atributos float utilizados para crear el componente.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.height">
            <summary>
            Altura del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.positionX">
            <summary>
            Posicion en X del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.positionY">
            <summary>
            Posicion en Y del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.level">
            <summary>
            Nivel al que pertenece el boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryButtonGoToPage.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.ButtonGoToPage"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryComponent">
            <summary>
            Esta clase es la responsable de delegar la responsabilidad de crear componentes.
            Utiliza la interfaz IFactoryComponent.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryComponent.componentFactories">
            <summary>
            Diccionario en donde se asociara un tag con su respectivo factory.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryComponent.factory">
            <summary>
            Fabrica generica utilizada para delegar la responsabilidad de crear cada componente a su respectivo factory Concreto.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryComponent.InitializeFactories">
            <summary>
            Metodo estatico reponsable de instanciar la clase FactoryComponent.
            </summary>
            <returns><see cref="T:Proyecto.Factory.CSharp.IFactoryComponent"/>.</returns>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryComponent.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Metodo responsable de delegar la responsabilidad de crear el componente.
            Intenta crear y asocia en el diccionario el nombre del componente (Tag.Nombre),
            con su respectivo factory.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryDragContainer">
            <summary>
            Esta clase es la responsable de crear objetos Container.
            Utiliza la in.terfaz IFactoryComponent.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDragContainer.name">
            <summary>
            Nombre del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDragContainer.image">
            <summary>
            Imagen del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDragContainer.width">
            <summary>
            Ancho del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDragContainer.height">
            <summary>
            Altura del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDragContainer.positionX">
            <summary>
            Posicion en X del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDragContainer.positionY">
            <summary>
            Posicion en Y del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDragContainer.level">
            <summary>
            Nivel al que pertenece el item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDragContainer.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryDragContainer.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.DragContainer"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryDraggableItem">
            <summary>
            Esta clase es la responsable de crear items que van a ser arrastables.
            Utiliza la interfaz IFactoryComponent.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.name">
            <summary>
            Nombre del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.image">
            <summary>
            Imagen del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.containerName">
            <summary>
            Container del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.width">
            <summary>
            Ancho del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.height">
            <summary>
            Altura del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.positionX">
            <summary>
            Posicion en X del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.positionY">
            <summary>
            Posicion en Y del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.draggable">
            <summary>
            Define si el item es arrastrable.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.level">
            <summary>
            Nivel al que pertenece el item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryDraggableItem.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.DraggableItem"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryImage">
            <summary>
            Esta clase es la responsable de crear las imagenes.
            Utiliza la interfaz IFactoryComponent.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryImage.name">
            <summary>
            Nombre de la imagen.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryImage.photo">
            <summary>
            Imagen de la imagen.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryImage.width">
            <summary>
            Ancho de la imagen.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryImage.height">
            <summary>
            Altura de la imagen.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryImage.positionX">
            <summary>
            Posicion en X de la imagen.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryImage.positionY">
            <summary>
            Posicion en Y de la imagen.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryImage.level">
            <summary>
            Nivel al que pertenece.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryImage.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryImage.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.Image"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryInputText">
            <summary>
            Esta clase es la responsable de crear las InputText.
            Utiliza la interfaz IFactoryComponent.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.name">
            <summary>
            Nombre del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.photo">
            <summary>
            Imagen del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.width">
            <summary>
            Ancho del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.height">
            <summary>
            Altura del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.positionX">
            <summary>
            Posicion en X del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.positionY">
            <summary>
            Posicion en Y del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.level">
            <summary>
            Nivel al que pertenece.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryInputText.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.InputText"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryLabel">
            <summary>
            Esta clase es la responsable de crear las etiquetas.
            Utiliza la interfaz IFactoryComponent.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.name">
            <summary>
            Nombre de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.photo">
            <summary>
            Imagen de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.width">
            <summary>
            Ancho de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.height">
            <summary>
            Altura de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.positionX">
            <summary>
            Posicion en X de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.positionY">
            <summary>
            Posicion en Y de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.level">
            <summary>
            Nivel al que pertenece.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.text">
            <summary>
            Texto de la etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryLabel.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.Label"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryMoney">
            <summary>
            Esta clase es la responsable de crear objetos Money arrastables.
            Utiliza la interfaz IFactoryComponent.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.name">
            <summary>
            Nombre del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.image">
            <summary>
            Imagen del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.containerName">
            <summary>
            Container del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.width">
            <summary>
            Ancho del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.height">
            <summary>
            Altura del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.positionX">
            <summary>
            Posicion en X del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.positionY">
            <summary>
            Posicion en Y del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.draggable">
            <summary>
            Define si el dinero es arrastrable.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.level">
            <summary>
            Nivel al que pertenece el dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.value">
            <summary>
            Valor del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryMoney.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.ScientistLevel.Money"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryMoneyContainer">
            <summary>
            Esta clase es la responsable de crear objetos Container.
            Utiliza la interfaz IFactoryComponent.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.name">
            <summary>
            Nombre del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.image">
            <summary>
            Imagen del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.width">
            <summary>
            Ancho del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.height">
            <summary>
            Altura del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.positionX">
            <summary>
            Posicion en X del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.positionY">
            <summary>
            Posicion en Y del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.level">
            <summary>
            Nivel al que pertenece el item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.acceptableValue">
            <summary>
            Valor que aceptara el container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryMoneyContainer.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.ScientistLevel.MoneyContainer"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactorySpace">
            <summary>
            Esta clase es la responsable de crear objetos Space.
            Utiliza la interfaz IFactoryComponent.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactorySpace.name">
            <summary>
            Nombre del espacio.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactorySpace.image">
            <summary>
            Imagen del espacio.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactorySpace.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactorySpace.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.LibraryModelado.Space"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryWorld">
            <summary>
            Esta clase es la responsable de crear objetos Mundo.
            Utiliza la interfaz IFactoryComponent.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryWorld.name">
            <summary>
            Nombre del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryWorld.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.LibraryModelado.World"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.IFactoryComponent">
            <summary>
            Interfaz IFactoryComponent.
            Todos los Factory serán de tipo IFactoryComponent.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.IFactoryComponent.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Metodo Abstracto para crear un objeto Componente a partir de un tag.
            </summary>
            <param name="tag"><see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns><see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.Unity.IFactoryUnity">
            <summary>
            Interfaz IFactoryUnity.
            Todos los Unity Factory serán de tipo IFactoryUnity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.IFactoryUnity.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Metodo Abstracto para agregar un objeto <see cref="T:Proyecto.LibraryModelado.IComponent"/>, a unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agragara a Unity, <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactory">
            <summary>
            Esta clase es la responsable de delegar la responsabilidad de agregar los componentes al juego.
            Implementa la interfaz <see cref="T:Proyecto.Factory.Unity.IFactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactory.componentUFactories">
            <summary>
            Diccionario en donde se asociara un componente con su respectivo Unity factory.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactory.uFactory">
            <summary>
            Fabrica de unity generica utilizada para delegar la responsabilidad de agregar cada componente a su respectivo unity factory Concreto.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactory.InitializeUnityFactories">
            <summary>
            Metodo estatico reponsable de instanciar la clase UFactory.
            </summary>
            <returns><see cref="T:Proyecto.Factory.Unity.IFactoryUnity"/>.</returns>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactory.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryUnity.
            Delega la responsabilidad de agregar el componente en unity, al respectivo Unity Factory del componente.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryButtonAudio">
            <summary>
            Esta clase es la resposable de agregar los componentes ButtonAudio al juego.
            Implementa la interfaz <see cref="T:Proyecto.Factory.Unity.IFactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryButtonAudio.buttonAudio">
            <summary>
            Objeto ButtonAudio que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryButtonAudio.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.ButtonAudio"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryButtonGoToPage">
            <summary>
            Esta clase es la resposable de agregar los componentes ButtonGoToPage al juego.
            Implementa la interfaz <see cref="T:Proyecto.Factory.Unity.IFactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryButtonGoToPage.buttonGoToPage">
            <summary>
            Objeto ButtonGoToPage que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryButtonGoToPage.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.ButtonGoToPage"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryDragContainer">
            <summary>
            Esta clase es la resposable de agregar los componentes DragContainer al juego.
            Implementa la interfaz <see cref="T:Proyecto.Factory.Unity.IFactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryDragContainer.dragContainer">
            <summary>
            Objeto DragContainer que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryDragContainer.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.DragContainer"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryDraggableItem">
            <summary>
            Esta clase es la resposable de agregar los componentes DraggableItem al juego.
            Implementa la interfaz <see cref="T:Proyecto.Factory.Unity.IFactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryDraggableItem.draggableItem">
            <summary>
            Objeto DraggableItem que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryDraggableItem.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.DraggableItem"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryImage">
            <summary>
            Esta clase es la resposable de agregar los componentes Image al juego.
            Implementa la interfaz <see cref="T:Proyecto.Factory.Unity.IFactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryImage.image">
            <summary>
            Objeto Image que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryImage.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.Image"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryInputText">
            <summary>
            Esta clase es la resposable de agregar los componentes InputText al juego.
            Implementa la interfaz <see cref="T:Proyecto.Factory.Unity.IFactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryInputText.input">
            <summary>
            Objeto InputText que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryInputText.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.InputText"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryLabel">
            <summary>
            Esta clase es la resposable de agregar los componentes Label al juego.
            Implementa la interfaz <see cref="T:Proyecto.Factory.Unity.IFactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryLabel.label">
            <summary>
            Objeto Label que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryLabel.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.Label"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryLevel">
            <summary>
            Esta clase es la resposable de agregar los componentes Space al juego.
            Implementa la interfaz <see cref="T:Proyecto.Factory.Unity.IFactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryLevel.level">
            <summary>
            Objeto Space que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryLevel.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.LibraryModelado.Space"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryWorld">
            <summary>
            Esta clase es la resposable de agregar los componentes Space al juego.
            Implementa la interfaz <see cref="T:Proyecto.Factory.Unity.IFactoryUnity"/>.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryWorld.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryUnity.
            No tiene ninguna funcionalidad debidoa a que no crearemos un objeto World en unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Item.Button">
            <summary>
            Clase responsable de crear botones genericos, no tienen ninguna funcionalidad.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>, e implementa la interfaz <see cref="T:Proyecto.LibraryModelado.IButton"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.Button.evento">
            <summary>
            Accion del boton.
            </summary>
        </member>
        <member name="M:Proyecto.Item.Button.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            Initializes a new instance of Button.
            </summary>
            <param name="name">Nombre del boton.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del boton.</param>
            <param name="color">Color del boton en Hexadecimal.</param>
        </member>
        <member name="P:Proyecto.Item.Button.Color">
            <summary>
            Gets or sets del Color del Boton.
            </summary>
            <value>string codigo en hexadecimal.</value>
        </member>
        <member name="P:Proyecto.Item.Button.Event">
            <summary>
            Gets or sets del evento del boton.
            </summary>
            <value>Action.</value>
        </member>
        <member name="M:Proyecto.Item.Button.Click(System.String)">
            <summary>
            Accion realizada por el boton.
            </summary>
            <param name="text">Sin funcionalidad.</param>
        </member>
        <member name="T:Proyecto.Item.ButtonAudio">
            <summary>
            Clase responsable de crear botones, con la funcionalidad de reproducir un audio en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>, e implementa la interfaz <see cref="T:Proyecto.LibraryModelado.IButton"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.ButtonAudio.evento">
            <summary>
            Accion de reproducir el sonido.
            </summary>
        </member>
        <member name="M:Proyecto.Item.ButtonAudio.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of ButtonAudio.
            </summary>
            <param name="name">Nombre del boton.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del boton.</param>
            <param name="color">Color del boton en Hexadecimal.</param>
            <param name="audioFile">Audio a reproducir por el boton.</param>
        </member>
        <member name="P:Proyecto.Item.ButtonAudio.Color">
            <summary>
            Gets or sets del Color del Boton.
            </summary>
            <value>string codigo en hexadecimal.</value>
        </member>
        <member name="P:Proyecto.Item.ButtonAudio.AudioFile">
            <summary>
            Gets or sets del Audio del boton.
            </summary>
            <value>string nombre del audio.</value>
        </member>
        <member name="P:Proyecto.Item.ButtonAudio.Event">
            <summary>
            Gets or sets del evento del boton.
            </summary>
            <value>Action.</value>
        </member>
        <member name="M:Proyecto.Item.ButtonAudio.Click(System.String)">
            <summary>
            Acciones realizadas por el boton.
            </summary>
            <param name="text">Sin funcionalidad.</param>
        </member>
        <member name="T:Proyecto.Item.ButtonGoToPage">
            <summary>
            Clase responsable de crear botones, con la funcionalidad de mostrar una pagina diferente en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>, e implementa la interfaz <see cref="T:Proyecto.LibraryModelado.IButton"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.ButtonGoToPage.evento">
            <summary>
            Accion de mostrar otra pagina.
            </summary>
        </member>
        <member name="M:Proyecto.Item.ButtonGoToPage.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String)">
            <summary>
            CInitializes a new instance of ButtonGoToPage.
            </summary>
            <param name="name">Nombre del boton.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del boton.</param>
            <param name="color">Color del boton en Hexadecimal.</param>
            <param name="pageName">Pagina para mostrar.</param>
        </member>
        <member name="P:Proyecto.Item.ButtonGoToPage.Color">
            <summary>
            Gets or sets del Color del Boton.
            </summary>
            <value>string codigo en hexadecimal.</value>
        </member>
        <member name="P:Proyecto.Item.ButtonGoToPage.PageName">
            <summary>
            Gets or sets de la pagina a mostrar.
            </summary>
            <value>string nombre del la pagina.</value>
        </member>
        <member name="P:Proyecto.Item.ButtonGoToPage.Event">
            <summary>
            Gets or sets del evento del boton.
            </summary>
            <value>Action.</value>
        </member>
        <member name="M:Proyecto.Item.ButtonGoToPage.Click(System.String)">
            <summary>
            Acciones realizadas por el boton.
            Busca el nivel que coincida con el nivel que mostrara al ser apretado, y obtiene su ID.
            </summary>
            <param name="text">Sin funcionalidad.</param>
        </member>
        <member name="T:Proyecto.Item.DragContainer">
            <summary>
            Clase responsable de crear containers para items arrastrables en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="M:Proyecto.Item.DragContainer.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Initializes a new instance of DragContainer.
            </summary>
            <param name="name">Nombre del container.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del container.</param>
        </member>
        <member name="P:Proyecto.Item.DragContainer.SavedItems">
            <summary>
            Gets or sets la lista de objetos items que son soltados dentro del container.
            </summary>
            <value>Lista de items.</value>
        </member>
        <member name="T:Proyecto.Item.DraggableItem">
            <summary>
            Clase responsable de crear items arrastrables en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.DraggableItem.onDrop">
            <summary>
            Accion que se ejecutara al soltar un item.
            </summary>
        </member>
        <member name="M:Proyecto.Item.DraggableItem.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.Boolean,Proyecto.LibraryModelado.Items)">
            <summary>
            Initializes a new instance of DraggableItem.
            </summary>
            <param name="name">Nombre del Item.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del Item.</param>
            <param name="draggable">Bool que define si es arrastrable.</param>
            <param name="container">Container en donde es creado el item.</param>
        </member>
        <member name="P:Proyecto.Item.DraggableItem.Container">
            <summary>
            Gets or sets del container.
            </summary>
            <value><see cref="T:Proyecto.LibraryModelado.Items"/>.</value>
        </member>
        <member name="P:Proyecto.Item.DraggableItem.Draggable">
            <summary>
            Gets or sets a value indicating whether el item es arrastrable.
            </summary>
            <value>Bool arrastrable.</value>
        </member>
        <member name="P:Proyecto.Item.DraggableItem.OnDrop">
            <summary>
            Gets or sets de la accion a realizar al soltar el item.
            </summary>
            <value>Action.</value>
        </member>
        <member name="M:Proyecto.Item.DraggableItem.Drop">
            <summary>
            Accion realizada al soltar el Item.
            </summary>
        </member>
        <member name="T:Proyecto.Item.Image">
            <summary>
            Clase responsable de crear imagenes en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="M:Proyecto.Item.Image.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Initializes a new instance of Image.
            </summary>
            <param name="name">Nombre de la imagen.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen de la imagen.</param>
        </member>
        <member name="T:Proyecto.Item.InputText">
            <summary>
            Clase responsable de crear InputText en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.InputText.onChange">
            <summary>
            Método a ejecutar cuando se cambia el texto de la entrada de texto.
            </summary>
        </member>
        <member name="F:Proyecto.Item.InputText.onEdited">
            <summary>
            Método a ejecutar cuando se termina de editar el texto de la entrada de texto.
            </summary>
        </member>
        <member name="M:Proyecto.Item.InputText.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Initializes a new instance of InputText.
            </summary>
            <param name="name">Nombre de la imagen.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del input.</param>
        </member>
        <member name="P:Proyecto.Item.InputText.OnEdited">
            <summary>
            Gets or sets del método a ejecutar cuando se termina de editar el texto de la entrada de texto.
            </summary>
            <value>Action.</value>
        </member>
        <member name="P:Proyecto.Item.InputText.OnChange">
            <summary>
            Gets or sets del método a ejecutar cuando se cambia el texto de la entrada de texto.
            </summary>
            <value>Action.</value>
        </member>
        <member name="T:Proyecto.Item.KitchenLevel.Bowl">
            <summary>
            Clase responsable de crear containers para alimentos en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="M:Proyecto.Item.KitchenLevel.Bowl.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Initializes a new instance of Bowl.
            </summary>
            <param name="name">Nombre del Item.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del Item.</param>
        </member>
        <member name="P:Proyecto.Item.KitchenLevel.Bowl.SavedFoods">
            <summary>
            Gets lista de objetos Food, que seran soltados dentro del container.
            </summary>
            <value>Alimentos <see cref="T:Proyecto.Item.KitchenLevel.Food"/>.</value>
        </member>
        <member name="P:Proyecto.Item.KitchenLevel.Bowl.IncorrectItems">
            <summary>
            Gets lista de alimentos incorrecto soltados dentro del container.
            </summary>
            <value>Items arrastrables <see cref="T:Proyecto.Item.DraggableItem"/>.</value>
        </member>
        <member name="T:Proyecto.Item.KitchenLevel.Food">
            <summary>
            Clase responsable de crear objetos de alimentos arrastrables en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.KitchenLevel.Food.onDrop">
            <summary>
            Accion que se ejecutara al soltar un alimento.
            </summary>
        </member>
        <member name="M:Proyecto.Item.KitchenLevel.Food.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.Boolean,Proyecto.LibraryModelado.Items)">
            <summary>
            Initializes a new instance of Food.
            </summary>
            <param name="name">Nombre del Food.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del Food.</param>
            <param name="draggable">Bool que define si es arrastrable.</param>
            <param name="container">Container Source en donde es creado.</param>
        </member>
        <member name="P:Proyecto.Item.KitchenLevel.Food.Container">
            <summary>
            Gets or sets del container.
            </summary>
            <value><see cref="T:Proyecto.LibraryModelado.Items"/>.</value>
        </member>
        <member name="P:Proyecto.Item.KitchenLevel.Food.Draggable">
            <summary>
            Gets or sets a value indicating whether el item es arrastrable.
            </summary>
            <value>Bool arrastrable.</value>
        </member>
        <member name="P:Proyecto.Item.KitchenLevel.Food.OnDrop">
            <summary>
            Gets or sets de la accion a realizar al soltar el alimento.
            </summary>
            <value>Action.</value>
        </member>
        <member name="M:Proyecto.Item.KitchenLevel.Food.Drop">
            <summary>
            Accion realizada al soltar el alimento.
            </summary>
        </member>
        <member name="T:Proyecto.Item.KitchenLevel.Recipe">
            <summary>
            Clase responsable de crear recetas en el modelado.
            </summary>
        </member>
        <member name="M:Proyecto.Item.KitchenLevel.Recipe.#ctor(System.String,Proyecto.Item.KitchenLevel.Food)">
            <summary>
            Initializes a new instance of Recipe.
            </summary>
            <param name="name">Nombre del Item.</param>
            <param name="food">Receta que contiene los items Food.</param>
        </member>
        <member name="P:Proyecto.Item.KitchenLevel.Recipe.FoodList">
            <summary>
            Gets lista de objetos Food, que seran soltados dentro del container para ganar el juego.
            </summary>
            <value>Alimentos<see cref="T:Proyecto.Item.KitchenLevel.Food"/>.</value>
        </member>
        <member name="T:Proyecto.Item.Label">
            <summary>
            Clase responsable de crear etiquetas en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="M:Proyecto.Item.Label.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            Initializes a new instance of Label.
            </summary>
            <param name="name">Nombre del texto.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del texto.</param>
            <param name="text">Texto de la etiqueta.</param>
        </member>
        <member name="P:Proyecto.Item.Label.Text">
            <summary>
            Gets or sets del texto.
            </summary>
            <value></value>
        </member>
        <member name="T:Proyecto.Item.ScientistLevel.ButtonTrueFalse">
            <summary>
            Clase responsable de crear botones true false, utilizados en un ejercicio multipleopcion, solamente un boton
            sera el true (correcto).
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>, e implementa la interfaz <see cref="T:Proyecto.LibraryModelado.IButton"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.ScientistLevel.ButtonTrueFalse.evento">
            <summary>
            Accion del boton.
            </summary>
        </member>
        <member name="M:Proyecto.Item.ScientistLevel.ButtonTrueFalse.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of Button.
            </summary>
            <param name="name">Nombre del boton.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del boton.</param>
            <param name="color">Color del boton en Hexadecimal.</param>
            <param name="value">Opcion de verdadero o falso.</param>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.ButtonTrueFalse.Color">
            <summary>
            Gets or sets del Color del Boton.
            </summary>
            <value>string codigo en hexadecimal.</value>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.ButtonTrueFalse.Value">
            <summary>
            Gets or sets del valor bool del boton.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.ButtonTrueFalse.Event">
            <summary>
            Gets or sets del evento del boton.
            </summary>
            <value>Action.</value>
        </member>
        <member name="M:Proyecto.Item.ScientistLevel.ButtonTrueFalse.Click(System.String)">
            <summary>
            Accion realizada por el boton.
            </summary>
            <param name="text">Sin funcionalidad.</param>
        </member>
        <member name="T:Proyecto.Item.ScientistLevel.Money">
            <summary>
            Clase responsable de crear dinero arrastrable en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.ScientistLevel.Money.onDropMoney">
            <summary>
            Accion que se ejecutara al soltar el dinero.
            </summary>
        </member>
        <member name="M:Proyecto.Item.ScientistLevel.Money.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.Boolean,Proyecto.Item.ScientistLevel.MoneyContainer,System.Single)">
            <summary>
            Initializes a new instance of Money.
            </summary>
            <param name="name">Nombre de la moneda.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen de la moneda.</param>
            <param name="draggable">Bool que define si es arrastrable.</param>
            <param name="container">Container Source en donde es creado.</param>
            <param name="valor">Valor de la moneda.</param>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.Money.Value">
            <summary>
            Gets or sets del valor de la moneda.
            </summary>
            <value>float valor de la moneda.</value>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.Money.Container">
            <summary>
            Gets or sets del container en el que se encuentra.
            </summary>
            <value><see cref="T:Proyecto.Item.DragContainer"/>.</value>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.Money.Draggable">
            <summary>
            Gets or sets a value indicating whether el item es arrastrable.
            </summary>
            <value>Bool arrastrable.</value>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.Money.OnDropMoney">
            <summary>
            Gets or sets de la accion a realizar al soltar el dinero.
            </summary>
            <value>Action.</value>
        </member>
        <member name="M:Proyecto.Item.ScientistLevel.Money.Drop(Proyecto.Item.ScientistLevel.MoneyContainer)">
            <summary>
            Accion realizada al soltar el dinero.
            </summary>
        </member>
        <member name="T:Proyecto.Item.ScientistLevel.MoneyContainer">
            <summary>
            Clase responsable de crear containers de dinero arrastrable en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.ScientistLevel.MoneyContainer.savedItem">
            <summary>
            Objeto Money guardado.
            </summary>
        </member>
        <member name="M:Proyecto.Item.ScientistLevel.MoneyContainer.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.Single)">
            <summary>
            Initializes a new instance of MoneyContainer.
            </summary>
            <param name="name">Nombre del container.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del container.</param>
            <param name="acceptableValue">Valor de dinero que aceptara el container.</param>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.MoneyContainer.AcceptableValue">
            <summary>
            Gets or sets del valor monetario aceptado por el container.
            </summary>
            <value>float valor aceptado.</value>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.MoneyContainer.SavedItem">
            <summary>
            Gets or sets de objetos Money soltado dentro del container.
            </summary>
            <value>Money.</value>
        </member>
    </members>
</doc>
