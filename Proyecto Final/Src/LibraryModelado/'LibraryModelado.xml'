<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibraryModelado</name>
    </assembly>
    <members>
        <member name="T:Proyecto.LibraryModelado.Engine.EngineGame">
            <summary>
            Motor general del juego.
            Tiene la responsabilidad de conocer y controlar la funcionalidad de los demas motores del juego.
            Para realizar los diferentes motores utilizamos el patrón SINGLETON, este nos permite garantizar
            la existencia de una sola instancia de clase. Además el acceso a esa única instancia tiene
            que ser global. Esto es de mucha utilidad debido a que vamos a necesitar llamar a los motores
            de los juego desde diferentes partes del código. Como se ejecuta una única vez nos aseguramos
            de que solo haya un motor de este juego.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Engine.IEngine"/>.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineGame.levelEngines">
            <summary>
            Diccionario en donde se le asocia a un nivel, su respectivo Motor.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineGame.engineUnity">
            <summary>
            Instancia de la clase EngineUnity.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineGame.engine">
            <summary>
            Motor generico <see cref="T:Proyecto.LibraryModelado.Engine.IEngine"/>.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineGame.mainPage">
            <summary>
            Pagina principal del juego, el motor la conoce para poder viajar a ella en cualquier momento.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineGame.currentPage">
            <summary>
            Pagina en que se encuentra actualmente el usuario.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineGame.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineGame.LevelEngines">
            <summary>
            Gets del diccionario de motores y niveles.
            </summary>
            <value>Diccionario de clave <see cref="T:Proyecto.LibraryModelado.Space"/> y valor <see cref="T:Proyecto.LibraryModelado.Engine.IEngine"/>.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineGame.CurrentPage">
            <summary>
            Gets or sets de la pagina en que se encuentra actualmente el usuario.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineGame.MainPage">
            <summary>
            Gets or sets de la pagina principal.
            </summary>
            <value>Space.</value>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineGame.AsociateLevelsWithEngines(System.Collections.Generic.List{Proyecto.LibraryModelado.IComponent})">
            <summary>
            Metodo responsable de asociarle a cada nivel su respectivo motor, y agregarlo al diccionario this.LevelEngines.
            En este método utilizamos una excepción, el fin de estas es indicar que el programa no puede continuar ejecutando
            en su estado actual, y como tal, terminarlo. Para manejar la excepción y darle una adecuada solucion al programa
            para que este siga operando. En este caso, lanza una excepción en caso que el motor no exista.
            </summary>
            <param name="componentList">Lista de componentes creados.</param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineGame.CreateInUnity(Proyecto.LibraryModelado.IComponent)">
            <summary>
            Metodo responsable de delegar la responsabilidad al motor de unity, de crear un
            objeto en unity.
            </summary>
            <param name="component">Componente</param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineGame.UpdateFeedback(Proyecto.Item.Feedback,System.String)">
            <summary>
            Clase EngineScientificExercise1, responsable de implementar la logica del ejercicio 1 del nivel scientific.
            Hereda de las clases abstractas <see cref="T:Proyecto.LibraryModelado.Engine.IEngine"/> y <see cref="T:Proyecto.LibraryModelado.Engine.ILevelEngine"/>.
            </summary>
            <param name="feedback"></param>
            <param name="text">Nuevo texto del feedback.</param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineGame.UpdateText(Proyecto.LibraryModelado.Items,System.String)">
            <summary>
            Metodo responsable de llamar al motor de unity para que actualize el texto de un objeto.
            </summary>
            <param name="items">Item que se vaya actualizar.</param>
            <param name="text">Nuevo texto del item.</param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineGame.StartLevelEngine(Proyecto.LibraryModelado.Space)">
            <summary>
            Metodo utilizado para iniciar o reiniciar el motor del juego de un determinado nivel.
            </summary>
            <param name="level">Nivel que este asociado al motor a iniciar.</param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineGame.CenterInContainer(Proyecto.LibraryModelado.Items)">
            <summary>
            Metodo responsable de llamar al motor de unity para Centrar un IDraggable en
            un IContainer.
            </summary>
            <param name="item">Item de tipo IDraggable.</param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineGame.SetItemDraggable(Proyecto.LibraryModelado.Items,System.Boolean)">
            <summary>
            Metodo responsable de llamar al motor de unity para actualizar un item
            para que sea arrastrable o no.
            Si el item ya es arrastrable, no se ejecutara el metodo de unity para evitar errores.
            </summary>
            <param name="item">Item que se va a actualizar.</param>
            <param name="isDraggable">Bool que indica si va a ser arrastrable.</param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineGame.SetActive(Proyecto.LibraryModelado.Items,System.Boolean)">
            <summary>
            Gets del nivel asociado a este Motor.
            </summary>
            <value>Level.</value>
        </member>
        <member name="T:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1">
            <summary>
            Gets de la etiqueta de texto utilizado para especificar si la accion fue correcta o incorrecta.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.recipe">
            <summary>
            Gets de contador utilizado para saber en que pagina del nivel nos encontramos.
            Existen dos paginas en el nivel.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.recipeList">
            <summary>
            Gets de contador utilizado para saber en que operacion de la pagina nos encontramos.
            Existen dos operaciones dentro de la pagina.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.level">
            <summary>
            Gets de los resultados de las sumas de una pagina.
            Por predeterminado los dos parametros son False.
            true = resutlado correcto.
            false = resultado Incorrecto.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.levelFeedback">
            <summary>
            Gets de los resultados del nivel.
            Por predeterminado los dos parametros son False.
            true = Completo una pagina correctamente (los dos parametros de this.ResultsOfPage son true).
            false = No completo las dos operaciones de la pagina.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.buttonNextLevel">
            <summary>
            Button que aparecera al completarse el nivel, con la funcionalidad de empezar el proximo nivel.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.buttonGoToMain">
            <summary>
            Boton que al apretarlo aparecera la pantalla principal.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.engineGame">
            <summary>
            Instancia unica del motor general.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.#ctor">
            <summary>
            Constructor del motor.
            </summary>
            <param name="moneyContainer">Container de dinero en donde es soltado el dinero.</param>
            <param name="money">Dinero arrastrado.</param>
            <returns>Bool si el dinero soltado es correcto.</returns>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.ButtonGoToMain">
            <summary>
            Gets or sets Boton que al apretarlo aparecera la pantalla principal.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.Operations">
            <summary>
            Gets de lista de operaciones del nivel.
            </summary>
            <value>Lista de operacions.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.LevelFeedback">
            <summary>
            Gets or sets del Feedback asociado al motor.
            </summary>
            <value>Feedback.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.Level">
            <summary>
            Gets or sets del nivel asociado a este Motor.
            </summary>
            <value>Level.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.OperationCounter">
            <summary>
            Gets or sets de contador utilizado para saber en que operacion de la pagina nos encontramos.
            Existen dos operaciones dentro de la pagina.
            </summary>
            <value>Int.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.actualRecipe">
            <summary>
            Gets or sets del contador de receta actual.
            </summary>
            <value>Int.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.ResultsOfLevel">
            <summary>
            Gets or sets de los resultados del nivel.
            Por predeterminado los dos parametros son False.
            true = Completo una pagina correctamente (los dos parametros de this.ResultsOfPage son true).
            false = No completo las dos operaciones de la pagina.
            </summary>
            <value>Array de Bools.</value>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.StartLevel">
            <summary>
            Metodo utilizado para iniciar o reiniciar el motor del juego.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.VerifyOperation(Proyecto.Item.KitchenLevel.Bowl,Proyecto.Item.KitchenLevel.Food)">
            <summary>
            Metodo responsable de verificar si el objeto tipo Food soltado dentro del Bowl,
            tiene el tipo que aceptado por la.
            </summary>
            <param name="bowl">Container tipo <see cref="T:Proyecto.Item.KitchenLevel.Bowl"/>.</param>
            <param name="food">DraggableItem tipo <see cref="T:Proyecto.Item.KitchenLevel.Food"/>.</param>
            <returns>Bool si el alimento está en la receta o no.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.VerifyWinLevel">
            <summary>
            Verifica que se hayan completado las tres operaciones de recetas.
            </summary>
            <returns>Bool.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.VerifyRecipe">
            <summary>
            Verifica que se haya completado la receta.
            </summary>
            <returns>Bool.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.VerifyExercise(Proyecto.Item.KitchenLevel.Bowl,Proyecto.Item.KitchenLevel.Food)">
            <summary>
            Metodo que se utiliza para verificar que este correctamente realizada una de las operaciones.
            Si esta bien hecha la operacion, el bool (en this.ResultsOfPage) asociado a la parte del nivel pasa a ser true.
            Al contador se le suma 1, y el container del money, pasa a ser el container en donde es dropeado.
            </summary>
            <param name="bowl">Container de alimentos donde se encuentra la receta.</param>
            <param name="food">Alimento arrastrado.</param>
            <returns>Bool si el alimento soltado es correcto.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.GoodFeedback">
            <summary>
            Gets de contador utilizado para saber en que pagina del nivel nos encontramos.
            Existen dos paginas en el nivel.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.BadFeedback">
            <summary>
            Gets de los resultados del nivel.
            Por predeterminado los dos parametros son False.
            true = Completo una pagina correctamente.
            false = No contesto bien la pregunta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.CreateFeedback">
            <summary>
            Sobrescribe el metodo abstracto de <see cref="T:Proyecto.LibraryModelado.Engine.IEngine"/>, crea el boton que mostrara la pagina principal al ejecutarlo.
            </summary>
            <summary>
            Metodo responsable de Crear y asignarle al motor, su respectivo objeto feedback.
            </summary>
            <param name="button">Boton seleccionado.</param>
            <returns>Bool si el boton es correcto.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.CreateButtonGoToMain">
            <summary>
            Metodo para crear un boton que al ejecutarlo ira a la pantalla principal.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineKitchenExercise1.RestartContainers">
            <summary>
            Método que devuelve cada objeto a su container originario.
            </summary>
        </member>
        <member name="T:Proyecto.LibraryModelado.Engine.EngineMagician">
            <summary>
            Clase EngineMagician, responsable de implementar la logica del ejercicio 1 del nivel scientific.
            Este motor presenta una ALTA COHESIÓN, debido a que, una clase con responsabilidades alta o fuertemente
            relacionadas tiene alta cohesión. Esto nos dice que, la información que almacena una clase debe ser coherente
            y debe estar (en la medida de lo posible) relacionada con la clase.Esto sucede claramente en EngineMagician
            este motor tiene solamente lo que le interesa para funcionar, por esto decidimos realizar un motor para cada ejercicio.
            Hereda de las clases abstractas <see cref="T:Proyecto.LibraryModelado.Engine.IEngine"/> y <see cref="T:Proyecto.LibraryModelado.Engine.ILevelEngine"/>.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineMagician.level">
            <summary>
            Variable Level utilizada para instanciar un nivel asignable.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineMagician.levelFeedback">
            <summary>
            Objeto de tipo <see cref="T:Proyecto.Item.Feedback"/> que mostrara por pantalla textos para interactuar con el usuario.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineMagician.buttonNextLevel">
            <summary>
            Button que aparecera al completarse el nivel, con la funcionalidad de empezar el proximo nivel.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineMagician.buttonGoToMain">
            <summary>
            Boton que al apretarlo aparecera la pantalla principal.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineMagician.engineGame">
            <summary>
            Instancia unica del motor general.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineMagician.currentOperation">
            <summary>
            Operacion que se este ejecutando acutalmente.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineMagician.#ctor">
            <summary>
            Constructor del motor.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineMagician.CurrentOperation">
            <summary>
            Gets or sets del operacion que se este ejecutando acutalmente.
            </summary>
            <value>Operation.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineMagician.ButtonGoToMain">
            <summary>
            Gets de contador utilizado para saber en que pagina del nivel nos encontramos.
            Existen dos paginas en el nivel.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineMagician.ButtonNextLevel">
            <summary>
            Gets de los resultados del nivel.
            Por predeterminado los cuatro parametros son False.
            true = Completo una pagina correctamente.
            false = No contesto bien la pregunta.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineMagician.Operations">
            <summary>
            Gets de lista de operaciones del nivel.
            </summary>
            <value>Lista de operacions.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineMagician.LevelFeedback">
            <summary>
            Gets or sets del Feedback asociado al motor.
            </summary>
            <param name="button">Boton presionado.</param>
            <returns>Bool si el boton es correcto.</returns>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineMagician.Level">
            <summary>
            Gets or sets del nivel asociado a este Motor.
            </summary>
            <value>Level.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineMagician.LevelCounter">
            <summary>
            Gets or sets de contador utilizado para saber en que operacion de la pagina nos encontramos.
            Existen dos operaciones dentro de la pagina.
            </summary>
            <value>Int.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineMagician.ResultsOfLevel">
            <summary>
            Gets or sets de los resultados del nivel.
            Por predeterminado los dos parametros son False.
            true = Completo una pagina correctamente (los dos parametros de this.ResultsOfPage son true).
            false = No completo las dos operaciones de la pagina.
            </summary>
            <value>Array de Bools.</value>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineMagician.StartLevel">
            <summary>
            Metodo utilizado para iniciar o reiniciar el motor del juego.
            Reinicia el feedback, el array de resultados, y el contador.
            Ademas recorre las operaciones, toma el ultimo container de la lista, debido a que
            este siempre sera el container del resultado. Toma el item guardado en este container,
            y lo retorna a su container inicial. Solamente si el Draggable item no es draggble
            (draggableItem.Draggable = false) lo convierte en true, para evitars errores.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineMagician.VerifyWinLevel">
            <summary>
            Verifica que se hayan completado las tres operaciones del nivel.
            </summary>
            <returns>Bool.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineMagician.VerifyExercise(Proyecto.Item.InputVerifyText,System.String)">
            <summary>
            Metodo que se utiliza para verificar que este correctamente realizada una de las operaciones.
            Si esta bien hecha la operacion, el bool (en this.ResultsOfPage) asociado a la parte del nivel pasa a ser true.
            Al contador se le suma 1, y el container del money, pasa a ser el container en donde es dropeado.
            </summary>
            <param name="input">Container de dinero en donde es soltado el dinero.</param>
            <param name="text">Dinero arrastrado.</param>
            <returns>Bool si el dinero soltado es correcto.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineMagician.GoodFeedback">
            <summary>
            Metodo que asigna al texto un buen feedback. Utilizado cuando la accion realizada es correcta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineMagician.BadFeedback">
            <summary>
            Metodo que asigna al texto un mal feedback. Utilizado cuando la accion realizada es incorrecta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineMagician.CreateFeedback">
            <summary>
            Metodo responsable de Crear y asignarle al motor, su respectivo objeto feedback.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineMagician.CreateButtonGoToMain">
            <summary>
            Metodo para crear un boton que al ejecutarlo ira a la pantalla principal.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineMagician.CreateButtonGoToNextLevel">
            <summary>
            Metodo para crear un boton que al ejecutarlo ira al proximo nivel del nivel cientifico.
            Este boton aparecera en pantalla al terminar un nivel.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineMagician.ChangeOperation">
            <summary>
            Metodo utilizado para actualizar la operacion que se encuentre en pantalla,
            Para su uso, el contador del nivel (this.LevelCounter) ya debe estar actualizado.
            </summary>
        </member>
        <member name="T:Proyecto.LibraryModelado.Engine.EngineScientificExercise1">
            <summary>
            Clase EngineScientificExercise1, responsable de implementar la logica del ejercicio 1 del nivel scientific.
            Este motor presenta una ALTA COHESIÓN, debido a que, una clase con responsabilidades alta o fuertemente
            relacionadas tiene alta cohesión. Esto nos dice que, la información que almacena una clase debe ser coherente
            y debe estar (en la medida de lo posible) relacionada con la clase.Esto sucede claramente en EngineScientificExercise1
            este motor tiene solamente lo que le interesa para funcionar, por esto decidimos realizar un motor para cada ejercicio.
            Además también cumple con el patrón EXPERT, este nos dice que, debemos asignar la responsabilidad al experto en
            información, es decir, a la clase que tiene la información necesaria para poder cumplir con la responsabilidad. En este
            caso, la clase que tiene toda la información lógica del ejercicio 1 es EngineScientificExcerise1, por esto, es la experta.
            Utilzamos este patrón porque se mantiene el encapsulamiento, los objetos utilizan su propia información para
            llevar a cabo sus tareas.
            Hereda de las clases abstractas <see cref="T:Proyecto.LibraryModelado.Engine.IEngine"/> y <see cref="T:Proyecto.LibraryModelado.Engine.ILevelEngine"/>.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.level">
            <summary>
            Variable Level utilizada para instanciar un nivel asignable.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.levelFeedback">
            <summary>
            Objeto de tipo <see cref="T:Proyecto.Item.Feedback"/> que mostrara por pantalla textos para interactuar con el usuario.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.buttonNextLevel">
            <summary>
            Button que aparecera al completarse el nivel, con la funcionalidad de empezar el proximo nivel.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.buttonGoToMain">
            <summary>
            Boton que al apretarlo aparecera la pantalla principal.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.engineGame">
            <summary>
            Instancia unica del motor general.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.#ctor">
            <summary>
            Constructor del motor.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.ButtonGoToMain">
            <summary>
            Gets or sets Boton que al apretarlo aparecera la pantalla principal.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.ButtonNextLevel">
            <summary>
            Gets or sets del boton que aparecera al completarse el nivel, con la funcionalidad de empezar el proximo nivel.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.Operations">
            <summary>
            Gets de lista de operaciones del nivel.
            </summary>
            <value>Lista de operacions.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.LevelFeedback">
            <summary>
            Gets or sets del Feedback asociado al motor.
            </summary>
            <value>Feedback.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.Level">
            <summary>
            Gets or sets del nivel asociado a este Motor.
            </summary>
            <value>Level.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.LevelCounter">
            <summary>
            Gets or sets de contador utilizado para saber en que operacion de la pagina nos encontramos.
            Existen dos operaciones dentro de la pagina.
            </summary>
            <value>Int.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.ResultsOfLevel">
            <summary>
            Gets or sets de los resultados del nivel.
            Por predeterminado los dos parametros son False.
            true = Completo una pagina correctamente (los dos parametros de this.ResultsOfPage son true).
            false = No completo las dos operaciones de la pagina.
            </summary>
            <value>Array de Bools.</value>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.StartLevel">
            <summary>
            Metodo utilizado para iniciar o reiniciar el motor del juego.
            Reinicia el feedback, el array de resultados, y el contador.
            Ademas recorre las operaciones, toma el ultimo container de la lista, debido a que
            este siempre sera el container del resultado. Toma el item guardado en este container,
            y lo retorna a su container inicial. Solamente si el Draggable item no es draggble
            (draggableItem.Draggable = false) lo convierte en true, para evitars errores.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.VerifyOperation(Proyecto.Item.ScientistLevel.MoneyContainer,Proyecto.Item.ScientistLevel.Money)">
            <summary>
            Metodo responsable de verificar si el objeto tipo Money soltado dentro del MoneyContainer,
            tiene el valor que acepta el container.
            </summary>
            <param name="moneyContainer">Container tipo <see cref="T:Proyecto.Item.ScientistLevel.MoneyContainer"/>.</param>
            <param name="money">DraggableItem tipo <see cref="T:Proyecto.Item.ScientistLevel.Money"/>.</param>
            <returns>Bool si el valor es correcto o no.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.VerifyWinLevel">
            <summary>
            Verifica que se hayan completado las tres operaciones del nivel.
            </summary>
            <returns>Bool.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.VerifyExercise(Proyecto.Item.ScientistLevel.MoneyContainer,Proyecto.Item.ScientistLevel.Money)">
            <summary>
            Metodo que se utiliza para verificar que este correctamente realizada una de las operaciones.
            Si esta bien hecha la operacion, el bool (en this.ResultsOfPage) asociado a la parte del nivel pasa a ser true.
            Al contador se le suma 1, y el container del money, pasa a ser el container en donde es dropeado.
            </summary>
            <param name="moneyContainer">Container de dinero en donde es soltado el dinero.</param>
            <param name="money">Dinero arrastrado.</param>
            <returns>Bool si el dinero soltado es correcto.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.GoodFeedback">
            <summary>
            Metodo que asigna al texto un buen feedback. Utilizado cuando la accion realizada es correcta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.BadFeedback">
            <summary>
            Metodo que asigna al texto un mal feedback. Utilizado cuando la accion realizada es incorrecta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.CreateFeedback">
            <summary>
            Metodo responsable de Crear y asignarle al motor, su respectivo objeto feedback.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.CreateButtonGoToMain">
            <summary>
            Metodo para crear un boton que al ejecutarlo ira a la pantalla principal.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.CreateButtonGoToNextLevel">
            <summary>
            Metodo para crear un boton que al ejecutarlo ira al proximo nivel del nivel cientifico.
            Este boton aparecera en pantalla al terminar un nivel.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise1.RestartContainers">
            <summary>
            Método que devuelve cada objeto a su container originario.
            </summary>
        </member>
        <member name="T:Proyecto.LibraryModelado.Engine.EngineScientificExercise2">
            <summary>
            Clase EngineScientificExercise2, responsable de implementar la logica del nivel scientific ejercicio 2.
            Este motor presenta una ALTA COHESIÓN, debido a que, una clase con responsabilidades alta o fuertemente
            relacionadas tiene alta cohesión. Esto nos dice que, la información que almacena una clase debe ser coherente
            y debe estar (en la medida de lo posible) relacionada con la clase.Esto sucede claramente en EngineScientificExercise2
            este motor tiene solamente lo que le interesa para funcionar, por esto decidimos realizar un motor para cada ejercicio.
            Además también cumple con el patrón EXPERT, este nos dice que, debemos asignar la responsabilidad al experto en
            información, es decir, a la clase que tiene la información necesaria para poder cumplir con la responsabilidad. En este
            caso, la clase que tiene toda la información lógica del ejercicio 1 es EngineScientificExcerise2, por esto, es la experta.
            Utilzamos este patrón porque se mantiene el encapsulamiento, los objetos utilizan su propia información para
            llevar a cabo sus tareas.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.level">
            <summary>
            Variable Level utilizada para instanciar un nivel asignable.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.engineGame">
            <summary>
            Instancia unica del motor general.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.levelFeedback">
            <summary>
            Objeto de tipo <see cref="T:Proyecto.Item.Feedback"/> que mostrara por pantalla textos para interactuar con el usuario.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.buttonNextLevel">
            <summary>
            Button que aparecera al completarse el nivel, con la funcionalidad de empezar el proximo nivel.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.buttonGoToMain">
            <summary>
            Boton que al apretarlo aparecera la pantalla principal.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.#ctor">
            <summary>
            Constructor del motor.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.ButtonGoToMain">
            <summary>
            Gets or sets Boton que al apretarlo aparecera la pantalla principal.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.ButtonNextLevel">
            <summary>
            Gets or sets del boton que aparecera al completarse el nivel, con la funcionalidad de empezar el proximo nivel.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.Operations">
            <summary>
            Gets de lista de operaciones del nivel
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.Level">
            <summary>
            Gets or sets del nivel asociado a este Motor.
            </summary>
            <value>Level.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.ResultsOfLevel">
            <summary>
            Gets or sets de los resultados del nivel.
            true = Completo la pregunta correctamente.
            false = No contesto bien la pregunta.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.LevelFeedback">
            <summary>
            Gets or sets del Feedback asociado al motor.
            </summary>
            <value>Feedback.</value>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.StartLevel">
            <summary>
            Metodo utilizado para iniciar o reiniciar el motor del nivel.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.VerifyWinLevel">
            <summary>
            Verifica que se hayan completado las dos preguntas del nivel.
            </summary>
            <returns>Bool.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.VerifyExercise(Proyecto.Item.ScientistLevel.ButtonTrueFalse)">
            <summary>
            Metodo que se utiliza para verificar que se responda la pregunta de forma correcta.
            Si esta bien contestada, el bool de la pagina (this.ResultsOfLevel) pasa a ser true, y el
            level counter suma 1.
            </summary>
            <param name="button">Boton seleccionado.</param>
            <returns>Bool si el boton es correcto.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.GoodFeedback">
            <summary>
            Metodo que asigna al texto un buen feedback. Utilizado cuando la accion realizada es correcta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.BadFeedback">
            <summary>
            Metodo que asigna al texto un mal feedback. Utilizado cuando la accion realizada es incorrecta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.CreateFeedback">
            <summary>
            Metodo responsable de Crear y asignarle al motor, su respectivo objeto feedback.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.CreateButtonGoToMain">
            <summary>
            Metodo para crear un boton que al ejecutarlo ira a la pantalla principal.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise2.CreateButtonGoToNextLevel">
            <summary>
            Metodo para crear un boton que al ejecutarlo ira al proximo nivel del nivel cientifico.
            Este boton aparecera en pantalla al terminar un nivel.
            </summary>
        </member>
        <member name="T:Proyecto.LibraryModelado.Engine.EngineScientificExercise3">
            <summary>
            Clase EngineScientificExercise3, responsable de implementar la logica del nivel scientific ejercicio 3.
            Este motor presenta una ALTA COHESIÓN, debido a que, una clase con responsabilidades alta o fuertemente
            relacionadas tiene alta cohesión. Esto nos dice que, la información que almacena una clase debe ser coherente
            y debe estar (en la medida de lo posible) relacionada con la clase.Esto sucede claramente en EngineScientificExercise3
            este motor tiene solamente lo que le interesa para funcionar, por esto decidimos realizar un motor para cada ejercicio.
            Además también cumple con el patrón EXPERT, este nos dice que, debemos asignar la responsabilidad al experto en
            información, es decir, a la clase que tiene la información necesaria para poder cumplir con la responsabilidad. En este
            caso, la clase que tiene toda la información lógica del ejercicio 1 es EngineScientificExcerise3, por esto, es la experta.
            Utilzamos este patrón porque se mantiene el encapsulamiento, los objetos utilizan su propia información para
            llevar a cabo sus tareas.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.level">
            <summary>
            Variable Level utilizada para instanciar un nivel asignable.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.engineGame">
            <summary>
            Instancia unica del motor general.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.levelFeedback">
            <summary>
            Objeto de tipo <see cref="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.Feedback"/> que mostrara por pantalla textos para interactuar con el usuario.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.buttonNextLevel">
            <summary>
            Button que aparecera al completarse el nivel, con la funcionalidad de empezar el proximo nivel.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.buttonGoToMain">
            <summary>
            Boton que al apretarlo aparecera la pantalla principal.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.currentOperation">
            <summary>
            Operacion que se este ejecutando acutalmente.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.ButtonGoToMain">
            <summary>
            Gets or sets Boton que al apretarlo aparecera la pantalla principal.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.ButtonNextLevel">
            <summary>
            Gets or sets del boton que aparecera al completarse el nivel, con la funcionalidad de empezar el proximo nivel.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.Operations">
            <summary>
            Gets de la lista de operaciones propias de cada nivel.
            </summary>
            <value>Lista de operaciones.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.CurrentOperation">
            <summary>
            Gets or sets del operacion que se este ejecutando acutalmente.
            </summary>
            <value>Operation.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.Level">
            <summary>
            Gets or sets Nivel asociado al motor.
            </summary>
            <value>Space.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.Feedback">
            <summary>
            Gets or sets de la etiqueta de texto utilizado para especificar si la accion fue correcta o incorrecta.
            </summary>
            <value>Etiqueta <see cref="T:Proyecto.Item.Label"/>.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.LevelCounter">
            <summary>
            Gets or sets de contador utilizado para saber en que pagina del nivel nos encontramos.
            Existen dos paginas en el nivel.
            </summary>
            <value>Int.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.ResultsOfLevel">
            <summary>
            Gets or sets de los resultados del nivel.
            Por predeterminado los cuatro parametros son False.
            true = Completo una pagina correctamente.
            false = No contesto bien la pregunta.
            </summary>
            <value>Array de Bools.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.LevelFeedback">
            <summary>
            Gets or sets del feedback asociado al motor.
            </summary>
            <value>Feedback.</value>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.VerifyWinLevel">
            <summary>
            Verifica que se hayan completado las cuatro paginas del nivel.
            </summary>
            <returns>Bool.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.VerifyExercise(Proyecto.Item.ScientistLevel.ButtonTrueFalse)">
            <summary>
            Metodo que se utiliza para verificar la opcion selccionada.
            Si esta bien contestada, el bool de la pagina (this.ResultsOfLevel) pasa a ser true, y el
            level counter suma 1.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.StartLevel">
            <summary>
            Metodo utilizado para iniciar o reiniciar el motor del nivel.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.GoodFeedback">
            <summary>
            Metodo que asigna al texto un buen feedback. Utilizado cuando la accion realizada es correcta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.BadFeedback">
            <summary>
            Metodo que asigna al texto un mal feedback. Utilizado cuando la accion realizada es incorrecta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.CreateFeedback">
            <summary>
            Metodo responsable de asignarle al motor, su respectivo objeto feedback.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.CreateButtonGoToMain">
            <summary>
            Sobrescribe el metodo abstracto de <see cref="T:Proyecto.LibraryModelado.Engine.IEngine"/>, crea el boton que mostrara la pagina principal al ejecutarlo.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.CreateButtonGoToNextLevel">
            <summary>
            Este boton aparecera en pantalla al terminar un nivel, al ejecutarlo ira a la proxima pantalla del nivel scientific.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise3.ChangeOperation">
            <summary>
            Metodo utilizado para actualizar la operacion que se encuentre en pantalla,
            Para su uso, el contador del nivel (this.LevelCounter) ya debe estar actualizado.
            </summary>
        </member>
        <member name="T:Proyecto.LibraryModelado.Engine.EngineScientificExercise4">
            <summary>
            Clase EngineScientificExercise2, responsable de implementar la logica del nivel scientific ejercicio 4.
            Este motor presenta una ALTA COHESIÓN, debido a que, una clase con responsabilidades alta o fuertemente
            relacionadas tiene alta cohesión. Esto nos dice que, la información que almacena una clase debe ser coherente
            y debe estar (en la medida de lo posible) relacionada con la clase.Esto sucede claramente en EngineScientificExercise4
            este motor tiene solamente lo que le interesa para funcionar, por esto decidimos realizar un motor para cada ejercicio.
            Además también cumple con el patrón EXPERT, este nos dice que, debemos asignar la responsabilidad al experto en
            información, es decir, a la clase que tiene la información necesaria para poder cumplir con la responsabilidad. En este
            caso, la clase que tiene toda la información lógica del ejercicio 1 es EngineScientificExcerise4, por esto, es la experta.
            Utilzamos este patrón porque se mantiene el encapsulamiento, los objetos utilizan su propia información para
            llevar a cabo sus tareas.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.level">
            <summary>
            Variable Level utilizada para instanciar un nivel asignable.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.engineGame">
            <summary>
            Instancia unica del motor general.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.levelFeedback">
            <summary>
            Objeto de tipo <see cref="T:Proyecto.Item.Feedback"/> que mostrara por pantalla textos para interactuar con el usuario.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.buttonGoToMain">
            <summary>
            Boton que al apretarlo aparecera la pantalla principal.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.buttonNextLevel">
            <summary>
            Button que aparecera al completarse el nivel, con la funcionalidad de empezar el proximo nivel.
            Como este es el ultimo nivel, solamente ira al menu.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.currentOperation">
            <summary>
            Operacion que se este ejecutando acutalmente.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.#ctor">
            <summary>
            Constructor del motor.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.ButtonGoToMain">
            <summary>
            Gets or sets Boton que al apretarlo aparecera la pantalla principal.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.ButtonNextLevel">
            <summary>
            Gets or sets del boton que aparecera al completarse el nivel.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.CurrentOperation">
            <summary>
            Gets or sets del operacion que se este ejecutando acutalmente.
            </summary>
            <value>Operation.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.Operations">
            <summary>
            Gets de lista de operaciones del nivel.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.Level">
            <summary>
            Gets or sets del nivel asociado a este Motor.
            </summary>
            <value>Level.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.LevelCounter">
            <summary>
            Gets or sets de contador utilizado para saber en que pagina del nivel nos encontramos.
            Existen dos paginas en el nivel.
            </summary>
            <value>Int.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.ResultsOfLevel">
            <summary>
            Gets or sets de los resultados del nivel.
            Por predeterminado los dos parametros son False.
            true = Completo una operacion correctamente.
            false = No contesto bien la pregunta.
            </summary>
            <value>Array de Bools.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.LevelFeedback">
            <summary>
            Gets or sets del Feedback asociado al motor.
            </summary>
            <value>Feedback.</value>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.StartLevel">
            <summary>
            Metodo utilizado para iniciar o reiniciar el motor del nivel.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.VerifyWinLevel">
            <summary>
            Verifica que se hayan completado las dos preguntas del nivel.
            </summary>
            <returns>Bool.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.VerifyExercise(Proyecto.Item.ScientistLevel.ButtonTrueFalse)">
            <summary>
            Metodo que se utiliza para verificar que se responda la pregunta de forma correcta.
            Si esta bien contestada, el bool de la pagina (this.ResultsOfLevel) pasa a ser true, y el
            level counter suma 1.
            </summary>
            <param name="button">Boton seleccionado.</param>
            <returns>Bool si el boton es correcto.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.GoodFeedback">
            <summary>
            Metodo que asigna al texto un buen feedback. Utilizado cuando la accion realizada es correcta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.BadFeedback">
            <summary>
            Metodo que asigna al texto un mal feedback. Utilizado cuando la accion realizada es incorrecta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.CreateFeedback">
            <summary>
            Metodo responsable de asignarle al motor, su respectivo objeto feedback.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.CreateButtonGoToNextLevel">
            <summary>
            Este boton aparecera en pantalla al terminar un nivel, al ejecutarlo ira a la proxima pantalla del nivel scientific.
            Como este es el ultimo nivel, ira al menu.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.CreateButtonGoToMain">
            <summary>
            Sobrescribe el metodo abstracto de <see cref="T:Proyecto.LibraryModelado.Engine.IEngine"/>, crea el boton que mostrara la pagina principal al ejecutarlo.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineScientificExercise4.ChangeOperation">
            <summary>
            Metodo utilizado para actualizar la operacion que se encuentre en pantalla,
            Para su uso, el contador del nivel (this.LevelCounter) ya debe estar actualizado.
            </summary>
        </member>
        <member name="T:Proyecto.LibraryModelado.Engine.EngineUnity">
            <summary>
            Motor resposable de conocer y asignar los metodos relacionados a Unity.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineUnity.unityFactory">
            <summary>
            Instancia de la UnityFactory.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Engine.EngineUnity.adapter">
            <summary>
            Un <see cref="T:Proyecto.Common.IMainViewAdapter"/> que permite construir una interfaz de usuario interactiva.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineUnity.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.EngineUnity.Adapter">
            <summary>
            Gets or sets del adaptador.
            </summary>
            <value>Adaptador del tipo <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</value>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineUnity.OnDrop(System.String,System.Single,System.Single)">
            <summary>
            Metodo Drop de un draggableItem.
            </summary>
            <param name="draggableItemID"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineUnity.FindDragContainer(System.Single,System.Single)">
            <summary>
            Si existe un container en esas coordenadas, lo devolvera.
            </summary>
            <param name="x">Coordenada en X en donde se solto el item.</param>
            <param name="y">Coordenada en Y en donde se solto el item.</param>
            <returns>IContainer.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineUnity.FindItem(System.String)">
            <summary>
            Metodo responnsable de buscar en la pagina en la que se encuentre el usuario,
            un Item que tenga el mismo UnityID que el entrante por parametro.
            </summary>
            <param name="unityID">ID de unity del item.</param>
            <returns>Devuelve el item encontrado.</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineUnity.CreateInUnity(Proyecto.LibraryModelado.IComponent)">
            <summary>
            Metodo responsable de enviar un IComponent a la UnityFactory.
            </summary>
            <param name="component">Component.</param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineUnity.UpdateFeedback(Proyecto.Item.Feedback,System.String)">
            <summary>
            Metodo responsable de actualizar el mensaje de feedback mostrado en pantalla.
            </summary>
            <param name="feedback">Feedback que se vaya a actualizar.</param>
            <param name="text">Nuevo texto.</param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineUnity.UpdateText(Proyecto.LibraryModelado.Items,System.String)">
            <summary>
            Metodo responsable de actualizar el texto de un objeto.
            </summary>
            <param name="item">Item que se vaya a actualizar.</param>
            <param name="text">Nuevo texto.</param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineUnity.CenterInUnity(Proyecto.LibraryModelado.Items,Proyecto.LibraryModelado.Items)">
            <summary>
            Metodo responsable de Centrar un IDraggable en su IContainer.
            </summary>
            <param name="item">IDraggableItem.</param>
            <param name="container">IContainer.</param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineUnity.SetItemDraggable(Proyecto.LibraryModelado.Items,System.Boolean)">
            <summary>
            Metodo responsable actualizar un item para que sea arrastrable o no.
            Si el item ya es arrastrable, no se ejecutara el metodo de unity para evitar errores.
            </summary>
            <param name="item">Item que se va a actualizar.</param>
            <param name="isDraggable">Bool que indica si va a ser arrastrable.</param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.EngineUnity.SetActive(Proyecto.LibraryModelado.Items,System.Boolean)">
            <summary>
            Metodo responsable de actualizar si un item es mostrado por pantalla u ocultado.
            </summary>
            <param name="item">Componente que se va a actualizar.</param>
            <param name="active">Bool que indica si se va a mostrar u ocultar.</param>
        </member>
        <member name="T:Proyecto.LibraryModelado.Engine.IEngine">
            <summary>
            Clase abstracta de motores.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.IEngine.CreateInUnity(Proyecto.LibraryModelado.IComponent)">
            <summary>
            Metodo responsable de enviar un IComponent a la UnityFactory.
            </summary>
            <param name="component">Component.</param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.IEngine.UpdateFeedback(Proyecto.Item.Feedback,System.String)">
            <summary>
            Metodo responsable de actualizar el mensaje de feedback mostrado en pantalla.
            </summary>
            <param name="feedback">Feedback que se vaya a actualizar.</param>
            <param name="text">Nuevo texto.</param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.IEngine.UpdateText(Proyecto.LibraryModelado.Items,System.String)">
            <summary>
            Metodo responsable de actualizar el texto que aparece sobre un objeto.
            </summary>
            <param name="items">Item que se vaya actualizar.</param>
            <param name="text">Nuevo texto del item.</param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.IEngine.SetItemDraggable(Proyecto.LibraryModelado.Items,System.Boolean)">
            <summary>
            Metodo responsable de actualizar un item para que sea arrastrable o no.
            Si el item ya es arrastrable, no se ejecutara el metodo de unity para evitar errores.
            </summary>
            <param name="item">Item que se va a actualizar.</param>
            <param name="isDraggable">Bool que indica si va a ser arrastrable.</param>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.IEngine.SetActive(Proyecto.LibraryModelado.Items,System.Boolean)">
            <summary>
            Metodo responsable actualizar si un item para que sea mostrado por pantalla u ocultado.
            </summary>
            <param name="item">item que se va a actualizar.</param>
            <param name="active">Bool que indica si se va a mostrar u ocultar.</param>
        </member>
        <member name="T:Proyecto.LibraryModelado.Engine.ILevelEngine">
            <summary>
            Interfaz para los motores de los niveles.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.ILevelEngine.Operations">
            <summary>
            Gets de la lista de operaciones propias de cada nivel.
            </summary>
            <value>Lista de operaciones.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.ILevelEngine.Level">
            <summary>
            Gets or sets Nivel asociado al motor.
            </summary>
            <value>Space.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.ILevelEngine.LevelFeedback">
            <summary>
            Gets or sets del feedback asociado al motor.
            </summary>
            <value>Feedback.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Engine.ILevelEngine.ButtonGoToMain">
            <summary>
            Gets or sets del boton que al apretarlo aparecera la pantalla principal.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.ILevelEngine.GoodFeedback">
            <summary>
            Metodo que asigna al texto un buen feedback. Utilizado cuando la accion realizada es correcta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.ILevelEngine.BadFeedback">
            <summary>
            Metodo que asigna al texto un mal feedback. Utilizado cuando la accion realizada es incorrecta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.ILevelEngine.StartLevel">
            <summary>
            Metodo utilizado para iniciar o reiniciar el motor del juego.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.ILevelEngine.CreateButtonGoToMain">
            <summary>
            Metodo que crea un boton prefabricado que al presionarlo mostrara la pantalla principal.
            </summary>
            <returns>IComponent</returns>
        </member>
        <member name="M:Proyecto.LibraryModelado.Engine.ILevelEngine.CreateFeedback">
            <summary>
            Metodo responsable de asignarle a un motor, su respectivo objeto feedback.
            </summary>
        </member>
        <member name="T:Proyecto.LibraryModelado.IButton">
            <summary>
            Interfaz de Botones.
            En esta interfaz utilizamos el Principio de SEGREGACIÓN de INTERFACES, este nos dice que,
            ninguna clase debería depender de métodos que no usa. Por tanto, creamos interfaces
            que definen comportamientos, las clases que necesiten de estos comportamientos van a
            implementar esta interfaz. Ejemplo: Botón 
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.IButton.Pushable">
            <summary>
            Gets or sets indicating whether el boton es presionable.
            Por defecto es true.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="M:Proyecto.LibraryModelado.IButton.Click(System.String)">
            <summary>
            Acciones y eventos realizados al hacer click en un boton.
            Esta operación es POLIMÓRFICA debido a que es implementada por dos
            o más objetos de diferentes tipos. El método Click, es implementado
            por todos los botones del juego, por esto, se puede llamar una operación
            Polymórfica. 
            </summary>
            <param name="text">String.</param>
        </member>
        <member name="T:Proyecto.LibraryModelado.IComponent">
            <summary>
            Interfaz IComponent.
            En esta interfaz utilizamos el Principio de SEGREGACIÓN de INTERFACES, este nos dice que,
            ninguna clase debería depender de métodos que no usa. Por tanto, creamos interfaces
            que definen comportamientos, las clases que necesiten de estos comportamientos van a
            implementar esta interfaz. Ejemplo: Space, World
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.IComponent.Name">
            <summary>
            Gets or sets del Nombre del componente.
            </summary>
            <value>String.</value>
        </member>
        <member name="T:Proyecto.LibraryModelado.IContainer">
            <summary>
            En esta interfaz utilizamos el Principio de SEGREGACIÓN de INTERFACES, este nos dice que,
            ninguna clase debería depender de métodos que no usa. Por tanto, creamos interfaces
            que definen comportamientos, las clases que necesiten de estos comportamientos van a
            implementar esta interfaz..
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.IContainer.SavedItems">
            <summary>
            Gets de Lista de elementos guardados en el container.
            </summary>
            <value>Lista de items.</value>
        </member>
        <member name="T:Proyecto.LibraryModelado.IDraggable">
            <summary>
            Interfaz de Botones.
            Esta interfaz es creada, debido a que, cuando en un futuro querramos
            tener difrentes tipos de botones lo podamos hacer. Por ejemplo, un botón
            que sea una imagen,un botón contador, botón audio, etc.
            En este caso, estamos pensando en la funcionalidad futura del código,
            para cuando debamos ampliar el juego.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.IDraggable.Container">
            <summary>
            Container en donde se encuentra el draggable item.
            </summary>
            <value>IContainer.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.IDraggable.Draggable">
            <summary>
            Gets or sets a value indicating whether el item es arrastrable.
            </summary>
            <value>Bool arrastrable.</value>
        </member>
        <member name="M:Proyecto.LibraryModelado.IDraggable.Drop(Proyecto.LibraryModelado.IContainer)">
            <summary>
            Metodo que se ejecutara al soltar el item.
            </summary>
            <param name="container">Container en donde se soltara el item.</param>
        </member>
        <member name="T:Proyecto.LibraryModelado.Items">
            <summary>
            Clase abstracta de Items en el modelado.
            Utilizamos HERENCIA en este caso debido a que, esta clase será la base de mucho de
            lo que creado en el proyecto. La clase descendiente (Width, Image, Height, etc.)
            va a heredar automáticamente los atributos,propiedades de Items. Las clases
            hijas aumentan la especialización dependiendo de lo que deben hacer cada una
            de ellas en el juego.
            Esta clase cumple con El principio de SUSTITUCIÓN de LISKOV, este nos dice que si en alguna
            parte de nuestro código estamos usando una clase, y esta clase es extendida, tenemos que poder
            utilizar cualquiera de las clases hijas y que el programa siga siendo válido. Esto nos obliga
            a asegurarnos de que cuando extendemos una clase no estamos alterando el comportamiento. En este
            caso, podemos utilizar Items o cualquiera de sus clases hijas como Button y nuestro programa
            funcionará de igual forma.
            de la padre.
            Implementa la interfaz <see cref="T:Proyecto.LibraryModelado.IComponent"/>.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Items.id">
            <summary>
            Unity ID del item.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Items.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Initializes a new instance of Items.
            </summary>
            <param name="name">Nombre del Item.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del Item.</param>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.IsActive">
            <summary>
            Gets or sets que indican si el item esta actualmente activo en pantalla.
            Por predeterminado sera true.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.Name">
            <summary>
            Gets or sets del nombre del item.
            </summary>
            <value>String nombre del item.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.Level">
            <summary>
            Gets or sets del Nivel al que pertenece el Item.
            </summary>
            <value>Level al que pertence.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.ID">
            <summary>
            Gets or sets del UnityID del Objeto.
            </summary>
            <value>Unity ID.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.PositionX">
            <summary>
            Gets or sets de Posicion en eje Horizontal en pixeles.
            </summary>
            <value>float posicion en eje horizontal.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.PositionY">
            <summary>
            Gets or sets dePosicion en eje Vertical en pixeles.
            </summary>
            <value>float posicion en eje vertical.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.Width">
            <summary>
            Gets or sets de Ancho en Pixeles.
            </summary>
            <value>float ancho en pixeles.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.Height">
            <summary>
            Gets or sets de Altura en pixeles.
            </summary>
            <value>float altura en pixeles.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Items.Image">
            <summary>
            Gets or sets la imagen del item.
            </summary>
            <value>String path to image.</value>
        </member>
        <member name="T:Proyecto.LibraryModelado.Operations">
            <summary>
            Las objetos Operations son utilizados como herramienta en donde en un lista
            se almacenan los objetos que esten presentes en una operacion de un juego.
            Por ejemplo: En el nivel ScientificExercise1 los Operations se utilizan para
            almacenar todos los containers utilizados en una sola cuenta.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Operations.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Collections.Generic.List{Proyecto.LibraryModelado.Items})">
            <summary>
            Constructor.
            </summary>
            <param name="name">Nombre de la operacion.</param>
            <param name="level">Nivel al que pertenece la operacion.</param>
            <param name="components">Lista de componentes.</param>
        </member>
        <member name="P:Proyecto.LibraryModelado.Operations.Name">
            <summary>
            Gets or sets del Nombre de la operacion.
            </summary>
            <value>String.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Operations.Level">
            <summary>
            Gets or sets del nivel a que pertenece la operacion.
            </summary>
            <value>Space.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Operations.Components">
            <summary>
            Gets or sets de la lista de componentes.
            </summary>
            <value>Lista de items.</value>
        </member>
        <member name="T:Proyecto.LibraryModelado.Level">
            <summary>
            Clase responsable de crear Niveles en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Space"/>.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Level.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of level.
            </summary>
            <param name="name">Nombre del nivel.</param>
            <param name="image">Nombre de la imagen de fondo del nivel.</param>
        </member>
        <member name="T:Proyecto.LibraryModelado.Singleton`1">
            <summary>
            El patrón SINGLETON nos permite garantizar la existencia de una sola instancia de clase.
            Además el acceso a esa única instancia tiene que ser global. Esto es de mucha utilidad
            debido a que, tomamos la decisión de que en nuestro juego haya un único World, por tanto,
            Singleton es fundamental debido a que se ejecuta una única vez, así nos aseguramos que
            sólo existe una instancia. En caso de querer llamarlo en cualquier parte del programa
            se puede realizar.
            </summary>
            <typeparam name="T">Clase Generica.</typeparam>
        </member>
        <member name="F:Proyecto.LibraryModelado.Singleton`1.instance">
            <summary>
            Instancia del singleton.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.Singleton`1.Instance">
            <summary>
            Gets de la instancia de la clase T.
            </summary>
            <value>Instance type T.</value>
        </member>
        <member name="T:Proyecto.LibraryModelado.Space">
            <summary>
            Clase abstracta de espacios en el modelado.
            Implementa la interfaz <see cref="T:Proyecto.LibraryModelado.IComponent"/>.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Space.world">
            <summary>
            Nombre del Mundo al que Pertencen.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.Space.id">
            <summary>
            Unity ID del Espacio.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.Space.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of space.
            </summary>
            <param name="name">Nombre del Espacio.</param>
            <param name="image">Nombre de la imagen de fondo del espacio.</param>
        </member>
        <member name="P:Proyecto.LibraryModelado.Space.IsActive">
            <summary>
            Gets or sets que indican si el item esta actualmente activo en pantalla.
            Por predeterminado sera true.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Space.Name">
            <summary>
            Gets or sets del nombre del espacio.
            </summary>
            <value>String nombre del espacio.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Space.Image">
            <summary>
            Gets or sets del nombre de la imgen de fondo del espacio.
            </summary>
            <value>string nombre de imagen.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Space.ID">
            <summary>
            Gets or sets del Unity ID del espacio.
            </summary>
            <value>String Unity ID.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Space.Width">
            <summary>
            Gets del ancho del nivel.
            </summary>
            <value>float ancho del nivel.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Space.Height">
            <summary>
            Gets de la altura del nivel.
            </summary>
            <value>float altura del nivel.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Space.World">
            <summary>
            Gets or sets del nombre del mundo al que pertenece.
            </summary>
            <value>String nombre del mundo.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.Space.ItemList">
            <summary>
            Gets de la lista de items pertenecientes a un espacio.
            </summary>
            <value>Lista de objetos tipo <see cref="T:Proyecto.LibraryModelado.Items"/>.</value>
        </member>
        <member name="T:Proyecto.LibraryModelado.User">
            <summary>
            Clase responable de crear un usuario.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.User.name">
            <summary>
            Nombre del usuario.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.User.age">
            <summary>
            Edad del usuario.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.User.genre">
            <summary>
            Genero del usuario.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.User.birth">
            <summary>
            Fecha de nacimiento del usuario.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.User.#ctor">
            <summary>
            Constructor del usuario.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.User.Genre">
            <summary>
            Gets or sets del Sexo del usuario.
            </summary>
            <value>string.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.User.Name">
            <summary>
            Gets or sets del nombre del usuario.
            </summary>
            <value>String.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.User.Age">
            <summary>
            Gets or sets de la edad del usuario.
            </summary>
            <value>Int.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.User.Birth">
            <summary>
            string Fecha de nacimiento del usuario.
            </summary>
            <value>String.</value>
        </member>
        <member name="T:Proyecto.LibraryModelado.World">
            <summary>
            Clase responsable de crear objetos mundo.
            Implementa la interfaz <see cref="T:Proyecto.LibraryModelado.IComponent"/>.
            </summary>
        </member>
        <member name="F:Proyecto.LibraryModelado.World.name">
            <summary>
            Nombre del Mundo.
            </summary>
        </member>
        <member name="M:Proyecto.LibraryModelado.World.#ctor">
            <summary>
            Initializes a new instance of world.
            </summary>
        </member>
        <member name="P:Proyecto.LibraryModelado.World.IsActive">
            <summary>
            Gets or sets que indican si el item esta actualmente activo en pantalla.
            Por predeterminado sera true.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyecto.LibraryModelado.World.Name">
            <summary>
            Gets or sets del nombre del mundo.
            </summary>
            <value>String nombre del mundo.</value>
        </member>
        <member name="P:Proyecto.LibraryModelado.World.SpaceList">
            <summary>
            Gets de la lista de espacios pertenecientes a un mundo.
            </summary>
            <value>Lista de Objetos <see cref="T:Proyecto.LibraryModelado.Space"/>.</value>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryBowl">
            <summary>
            Esta clase es la responsable de crear objetos Container.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryBowl.name">
            <summary>
            Nombre del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryBowl.image">
            <summary>
            Imagen del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryBowl.width">
            <summary>
            Ancho del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryBowl.height">
            <summary>
            Altura del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryBowl.positionX">
            <summary>
            Posicion en X del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryBowl.positionY">
            <summary>
            Posicion en Y del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryBowl.level">
            <summary>
            Nivel al que pertenece el item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryBowl.acceptableValue">
            <summary>
            Valor que aceptara el container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryBowl.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryBowl.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.KitchenLevel.Bowl"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryButton">
            <summary>
            Esta clase es la responsable de crear objetos Botones Genéricos.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.name">
            <summary>
            Nombre del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.color">
            <summary>
            Color del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.image">
            <summary>
            Imagen del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.width">
            <summary>
            Ancho del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.height">
            <summary>
            Altura del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.positionX">
            <summary>
            Posicion en X del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.positionY">
            <summary>
            Posicion en Y del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.level">
            <summary>
            Nivel del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButton.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryButton.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.Button"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryButtonAudio">
            <summary>
            Esta clase es la responsable de crear objetos BotonAudio.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.name">
            <summary>
            Nombre del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.color">
            <summary>
            Color del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.image">
            <summary>
            Imagen del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.audio">
            <summary>
            Archivo de audio que reproduce el boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.width">
            <summary>
            Ancho del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.height">
            <summary>
            Altura del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.positionX">
            <summary>
            Posicion en X del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.positionY">
            <summary>
            Posicion en Y del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.level">
            <summary>
            Nivel del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonAudio.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryButtonAudio.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.ButtonAudio"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryButtonGoToPage">
            <summary>
            Esta clase es la responsable de crear objetos Boton para ir a la próxima página.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.name">
            <summary>
            Nombre del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.color">
            <summary>
            Color del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.image">
            <summary>
            Imagen del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.pageName">
            <summary>
            Pagina de destino del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.width">
            <summary>
            Atributos float utilizados para crear el componente.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.height">
            <summary>
            Altura del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.positionX">
            <summary>
            Posicion en X del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.positionY">
            <summary>
            Posicion en Y del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.level">
            <summary>
            Nivel al que pertenece el boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonGoToPage.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryButtonGoToPage.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.ButtonGoToPage"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryButtonShowImage">
            <summary>
            Esta clase es la responsable de crear objetos Boton para mostrar la imagen.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonShowImage.name">
            <summary>
            Nombre del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonShowImage.color">
            <summary>
            Color del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonShowImage.image">
            <summary>
            Imagen del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonShowImage.pageName">
            <summary>
            Pagina de destino del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonShowImage.width">
            <summary>
            Atributos float utilizados para crear el componente.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonShowImage.height">
            <summary>
            Altura del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonShowImage.positionX">
            <summary>
            Posicion en X del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonShowImage.positionY">
            <summary>
            Posicion en Y del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonShowImage.level">
            <summary>
            Nivel al que pertenece el boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonShowImage.imageName">
            <summary>
            Nombre de la imagen (o boton) que mostrara.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonShowImage.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryButtonShowImage.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.ButtonGoToPage"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryButtonStartLevel">
            <summary>
            Esta clase es la responsable de crear objetos Boton para ir a la próxima página.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonStartLevel.name">
            <summary>
            Nombre del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonStartLevel.color">
            <summary>
            Color del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonStartLevel.image">
            <summary>
            Imagen del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonStartLevel.levelName">
            <summary>
            Pagina de destino del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonStartLevel.width">
            <summary>
            Atributos float utilizados para crear el componente.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonStartLevel.height">
            <summary>
            Altura del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonStartLevel.positionX">
            <summary>
            Posicion en X del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonStartLevel.positionY">
            <summary>
            Posicion en Y del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonStartLevel.level">
            <summary>
            Nivel al que pertenece el boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonStartLevel.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryButtonStartLevel.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.ButtonGoToPage"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryButtonTrueFalse">
            <summary>
            Esta clase es la responsable de crear objetos Botones Genéricos.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonTrueFalse.name">
            <summary>
            Nombre del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonTrueFalse.color">
            <summary>
            Color del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonTrueFalse.image">
            <summary>
            Imagen del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonTrueFalse.width">
            <summary>
            Ancho del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonTrueFalse.height">
            <summary>
            Altura del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonTrueFalse.positionX">
            <summary>
            Posicion en X del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonTrueFalse.positionY">
            <summary>
            Posicion en Y del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonTrueFalse.value">
            <summary>
            Valor bool del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonTrueFalse.level">
            <summary>
            Nivel del boton.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryButtonTrueFalse.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryButtonTrueFalse.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.Button"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryComponent">
            <summary>
            Esta clase es la responsable de delegar la responsabilidad de crear componentes.
            FactoryComponent cumple cn el PRINICIPIO OCP, el cual nos dice que Las clases
            deben ser abiertas a la extensión, pero cerradas a la modificación.Esto ocurre en
            esta clase debido a que, en caso de querer crear más componentes lo podemos hacer
            sin necesidad de modificar el código.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryComponent.componentFactories">
            <summary>
            Diccionario en donde se asociara un tag con su respectivo factory.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryComponent.factory">
            <summary>
            Fabrica generica utilizada para delegar la responsabilidad de crear cada componente a su respectivo factory Concreto.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryComponent.InitializeFactories">
            <summary>
            Metodo estatico reponsable de instanciar la clase FactoryComponent.
            </summary>
            <returns><see cref="T:Proyecto.Factory.CSharp.CFactory"/>.</returns>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryComponent.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Metodo responsable de delegar la responsabilidad de crear el componente.
            Intenta crear y asocia en el diccionario el nombre del componente (Tag.Nombre),
            con su respectivo factory.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryDragContainer">
            <summary>
            Esta clase es la responsable de crear objetos Container.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDragContainer.name">
            <summary>
            Nombre del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDragContainer.image">
            <summary>
            Imagen del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDragContainer.width">
            <summary>
            Ancho del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDragContainer.height">
            <summary>
            Altura del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDragContainer.positionX">
            <summary>
            Posicion en X del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDragContainer.positionY">
            <summary>
            Posicion en Y del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDragContainer.level">
            <summary>
            Nivel al que pertenece el item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDragContainer.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryDragContainer.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.DragContainer"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryDraggableItem">
            <summary>
            Esta clase es la responsable de crear items que van a ser arrastables.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.name">
            <summary>
            Nombre del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.image">
            <summary>
            Imagen del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.containerName">
            <summary>
            Container del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.width">
            <summary>
            Ancho del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.height">
            <summary>
            Altura del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.positionX">
            <summary>
            Posicion en X del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.positionY">
            <summary>
            Posicion en Y del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.draggable">
            <summary>
            Define si el item es arrastrable.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.level">
            <summary>
            Nivel al que pertenece el item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryDraggableItem.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryDraggableItem.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.DraggableItem"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryFeedback">
            <summary>
            Esta clase es la responsable de crear las etiquetas.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFeedback.name">
            <summary>
            Nombre de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFeedback.photo">
            <summary>
            Imagen de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFeedback.width">
            <summary>
            Ancho de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFeedback.height">
            <summary>
            Altura de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFeedback.positionX">
            <summary>
            Posicion en X de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFeedback.positionY">
            <summary>
            Posicion en Y de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFeedback.level">
            <summary>
            Nivel al que pertenece.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFeedback.text">
            <summary>
            Texto de la etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFeedback.size">
            <summary>
            Tamaño del texto.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFeedback.bold">
            <summary>
            Bool si el texto va en negrita.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFeedback.italic">
            <summary>
            Bool si el texto va en cursiva.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFeedback.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryFeedback.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.Label"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryFood">
            <summary>
            Esta clase es la responsable de crear items que van a ser arrastables.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFood.name">
            <summary>
            Nombre del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFood.image">
            <summary>
            Imagen del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFood.containerName">
            <summary>
            Container del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFood.width">
            <summary>
            Ancho del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFood.height">
            <summary>
            Altura del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFood.positionX">
            <summary>
            Posicion en X del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFood.positionY">
            <summary>
            Posicion en Y del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFood.draggable">
            <summary>
            Define si el item es arrastrable.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFood.level">
            <summary>
            Nivel al que pertenece el item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryFood.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryFood.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.KitchenLevel.Food"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryImage">
            <summary>
            Esta clase es la responsable de crear las imagenes.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryImage.name">
            <summary>
            Nombre de la imagen.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryImage.photo">
            <summary>
            Imagen de la imagen.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryImage.width">
            <summary>
            Ancho de la imagen.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryImage.height">
            <summary>
            Altura de la imagen.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryImage.positionX">
            <summary>
            Posicion en X de la imagen.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryImage.positionY">
            <summary>
            Posicion en Y de la imagen.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryImage.level">
            <summary>
            Nivel al que pertenece.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryImage.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryImage.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.Image"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryInputText">
            <summary>
            Esta clase es la responsable de crear las InputText.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.name">
            <summary>
            Nombre del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.width">
            <summary>
            Ancho del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.height">
            <summary>
            Altura del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.positionX">
            <summary>
            Posicion en X del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.positionY">
            <summary>
            Posicion en Y del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.level">
            <summary>
            Nivel al que pertenece.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.size">
            <summary>
            Tamaño del texto.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.bold">
            <summary>
            Bool si el texto va en negrita.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.italic">
            <summary>
            Bool si el texto va en cursiva.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.photo">
            <summary>
            Imagen del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputText.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryInputText.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.InputText"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryInputVerifyText">
            <summary>
            Esta clase es la responsable de crear las InputText.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputVerifyText.name">
            <summary>
            Nombre del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputVerifyText.width">
            <summary>
            Ancho del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputVerifyText.height">
            <summary>
            Altura del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputVerifyText.positionX">
            <summary>
            Posicion en X del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputVerifyText.positionY">
            <summary>
            Posicion en Y del input.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputVerifyText.level">
            <summary>
            Nivel al que pertenece.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputVerifyText.acceptableValue">
            <summary>
            Valor que aceptara el container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputVerifyText.size">
            <summary>
            Tamaño del texto.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputVerifyText.bold">
            <summary>
            Bool si el texto va en negrita.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputVerifyText.italic">
            <summary>
            Bool si el texto va en cursiva.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputVerifyText.photo">
            <summary>
            Imagen del imput.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryInputVerifyText.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryInputVerifyText.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.InputText"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryLabel">
            <summary>
            Esta clase es la responsable de crear las etiquetas.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.name">
            <summary>
            Nombre de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.photo">
            <summary>
            Imagen de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.width">
            <summary>
            Ancho de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.height">
            <summary>
            Altura de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.positionX">
            <summary>
            Posicion en X de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.positionY">
            <summary>
            Posicion en Y de la Etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.level">
            <summary>
            Nivel al que pertenece.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.text">
            <summary>
            Texto de la etiqueta.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.size">
            <summary>
            Tamaño del texto.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.bold">
            <summary>
            Bool si el texto va en negrita.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.italic">
            <summary>
            Bool si el texto va en cursiva.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryLabel.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryLabel.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.Label"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryMoney">
            <summary>
            Esta clase es la responsable de crear objetos Money arrastables.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.name">
            <summary>
            Nombre del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.image">
            <summary>
            Imagen del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.containerName">
            <summary>
            Container del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.width">
            <summary>
            Ancho del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.height">
            <summary>
            Altura del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.positionX">
            <summary>
            Posicion en X del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.positionY">
            <summary>
            Posicion en Y del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.draggable">
            <summary>
            Define si el dinero es arrastrable.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.level">
            <summary>
            Nivel al que pertenece el dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.value">
            <summary>
            Valor del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.container">
            <summary>
            Contenedor en donde sera creado el dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoney.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryMoney.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.ScientistLevel.Money"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryMoneyContainer">
            <summary>
            Esta clase es la responsable de crear objetos Container.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.name">
            <summary>
            Nombre del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.image">
            <summary>
            Imagen del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.width">
            <summary>
            Ancho del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.height">
            <summary>
            Altura del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.positionX">
            <summary>
            Posicion en X del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.positionY">
            <summary>
            Posicion en Y del container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.level">
            <summary>
            Nivel al que pertenece el item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.acceptableValue">
            <summary>
            Valor que aceptara el container.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryMoneyContainer.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryMoneyContainer.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.ScientistLevel.MoneyContainer"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryOperations">
            <summary>
            Esta clase es la responsable de crear las Operationsnes.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryOperations.components">
            <summary>
            Componentes.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryOperations.level">
            <summary>
            Nivel al que pertenece.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryOperations.name">
            <summary>
            Nombre de la operacion.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryOperations.componentList">
            <summary>
            Lista en donde se guardaran los componentes asociados a la operacion.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryOperations.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryOperations.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.LibraryModelado.Operations"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryRecipe">
            <summary>
            Esta clase es la responsable de crear items que van a ser arrastables.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryRecipe.name">
            <summary>
            Nombre del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryRecipe.level">
            <summary>
            Espacio del item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryRecipe.foodList">
            <summary>
            Lista de objetos food de item.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryRecipe.foodListString">
            <summary>
            Lista de strings con los tipos de food.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryRecipe.foodQuantityInt">
            <summary>
            Lista con la cantidad de objetos food.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryRecipe.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryRecipe.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.Item.KitchenLevel.Recipe"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactorySpace">
            <summary>
            Esta clase es la responsable de crear objetos Space.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactorySpace.name">
            <summary>
            Nombre del espacio.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactorySpace.image">
            <summary>
            Imagen del espacio.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactorySpace.world">
            <summary>
            Instancia del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactorySpace.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.LibraryModelado.Space"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.FactoryWorld">
            <summary>
            Esta clase es la responsable de crear objetos Mundo.
            Hereda de la clase abstracta <see cref="T:Proyecto.Factory.CSharp.CFactory"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.CSharp.FactoryWorld.name">
            <summary>
            Nombre del mundo.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.FactoryWorld.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryComponent.
            Tiene la responsabilidad de crear el componente de tipo <see cref="T:Proyecto.LibraryModelado.World"/>.
            </summary>
            <param name="tag">Tag <see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns>Componente <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.CSharp.CFactory">
            <summary>
            Clase abstracta de la fabrica de objetos IComponent en el modelado de C#.
            Todos los Factory serán de tipo CFactory.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.CSharp.CFactory.MakeComponent(Proyecto.LeerHTML.Tag)">
            <summary>
            Metodo Abstracto para crear un objeto Componente a partir de un tag.
            </summary>
            <param name="tag"><see cref="T:Proyecto.LeerHTML.Tag"/>.</param>
            <returns><see cref="T:Proyecto.LibraryModelado.IComponent"/>.</returns>
        </member>
        <member name="T:Proyecto.Factory.Unity.FactoryUnity">
            <summary>
            Clase Abstacta FactoryUnity.
            En esta interfaz utilizamos el Principio de SEGREGACIÓN de INTERFACES, este nos dice que,
            ninguna clase debería depender de métodos que no usa. Por tanto, creamos interfaces
            que definen comportamientos, las clases que necesiten de estos comportamientos van a
            implementar esta interfaz.En este caso, todos los factory de unity utiluzan esta interfaz. 
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.FactoryUnity.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Metodo Abstracto para agregar un objeto <see cref="T:Proyecto.LibraryModelado.IComponent"/>, a unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agragara a Unity, <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactory">
            <summary>
            Esta clase es la responsable de delegar la responsabilidad de agregar los componentes al juego.
            En esta clase se ve claramente el Patrón de BAJO ACOMPLAMIENTO, debido a que nuestro juego
            esta completamente desacomplado de Unity, en caso de querer desplegar nuestro juego en otra
            plataforma podemos realizarlo. 
            Esta clase tiene un acomplamiento bajo, de la mano con esto podemos darnos cuenta que también
            cumple con el patron DON’T TALK TO STRANGERS. Esto se debe a que UFactory no conoce las conexiones
            internas y estructuras de otro objeto, sino que, se basa solamente en sí mismo para la creación de
            objetos, no necesita conocer a los objetos indirectos.
            Como dijimos anteriormente, esto lo hacemos para que Unity quede lo mas desacoplado posible de nuestro
            código.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactory.componentUFactories">
            <summary>
            Diccionario en donde se asociara un componente con su respectivo Unity factory.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactory.uFactory">
            <summary>
            Fabrica de unity generica utilizada para delegar la responsabilidad de agregar cada componente a su respectivo unity factory Concreto.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactory.InitializeUnityFactories">
            <summary>
            Metodo estatico reponsable de instanciar la clase UFactory.
            </summary>
            <returns><see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.</returns>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactory.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de IFactoryUnity.
            Delega la responsabilidad de agregar el componente en unity, al respectivo Unity Factory del componente.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryButtonAudio">
            <summary>
            Esta clase es la resposable de agregar los componentes ButtonAudio al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryButtonAudio.buttonAudio">
            <summary>
            Objeto ButtonAudio que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryButtonAudio.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.ButtonAudio"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryButtonGoToPage">
            <summary>
            Esta clase es la resposable de agregar los componentes ButtonGoToPage al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryButtonGoToPage.buttonGoToPage">
            <summary>
            Objeto ButtonGoToPage que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryButtonGoToPage.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.ButtonGoToPage"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryButtonShowImage">
            <summary>
            Esta clase es la resposable de agregar los componentes ButtonShowImage al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryButtonShowImage.buttonShowImage">
            <summary>
            Objeto ButtonShowImage que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryButtonShowImage.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.ButtonGoToPage"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryButtonStartLevel">
            <summary>
            Esta clase es la resposable de agregar los componentes ButtonGoToPage al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryButtonStartLevel.buttonStartLevel">
            <summary>
            Objeto ButtonGoToPage que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryButtonStartLevel.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.ButtonGoToPage"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryButtonTrueFalse">
            <summary>
            Esta clase es la resposable de agregar los componentes ButtonTrueFalse al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryButtonTrueFalse.buttonTrueFalse">
            <summary>
            Objeto ButtonTrueFalse que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryButtonTrueFalse.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.ScientistLevel.ButtonTrueFalse"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryDragContainer">
            <summary>
            Esta clase es la resposable de agregar los componentes DragContainer al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryDragContainer.dragContainer">
            <summary>
            Objeto DragContainer que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryDragContainer.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.DragContainer"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryDraggableItem">
            <summary>
            Esta clase es la resposable de agregar los componentes DraggableItem al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryDraggableItem.draggableItem">
            <summary>
            Objeto DraggableItem que se agregara a Unity.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryDraggableItem.engineUnity">
            <summary>
            Instancia del motor.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryDraggableItem.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.DraggableItem"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryFeedback">
            <summary>
            Esta clase es la resposable de agregar los componentes feedback al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryFeedback.feedback">
            <summary>
            Objeto feedback que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryFeedback.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="F:Proyecto.Factory.Unity.UFactoryFeedback.feedback"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryFood">
            <summary>
            Esta clase es la resposable de agregar los componentes Food al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryFood.food">
            <summary>
            Objeto Food que se agregara a Unity.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryFood.engineUnity">
            <summary>
            Instancia del motor de unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryFood.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.KitchenLevel.Food"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryFoodContainer">
            <summary>
            Esta clase es la resposable de agregar los componentes Bowl al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryFoodContainer.bowl">
            <summary>
            Objeto Bowl que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryFoodContainer.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.KitchenLevel.Bowl"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryImage">
            <summary>
            Esta clase es la resposable de agregar los componentes Image al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryImage.image">
            <summary>
            Objeto Image que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryImage.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.Image"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryInputText">
            <summary>
            Esta clase es la resposable de agregar los componentes InputText al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryInputText.input">
            <summary>
            Objeto InputText que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryInputText.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.InputText"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryInputVerifyText">
            <summary>
            Esta clase es la resposable de agregar los componentes InputText al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryInputVerifyText.inputVerify">
            <summary>
            Objeto InputText que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryInputVerifyText.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.InputText"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryLabel">
            <summary>
            Esta clase es la resposable de agregar los componentes Label al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryLabel.label">
            <summary>
            Objeto Label que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryLabel.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.Label"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryLevel">
            <summary>
            Esta clase es la resposable de agregar los componentes Space al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryLevel.level">
            <summary>
            Objeto Space que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryLevel.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.LibraryModelado.Space"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryMoney">
            <summary>
            Esta clase es la resposable de agregar los componentes Money al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryMoney.money">
            <summary>
            Objeto Money que se agregara a Unity.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryMoney.engineUnity">
            <summary>
            Instancia del motor de unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryMoney.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.ScientistLevel.Money"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryMoneyContainer">
            <summary>
            Esta clase es la resposable de agregar los componentes MoneyContainer al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryMoneyContainer.moneyContainer">
            <summary>
            Objeto MoneyContainer que se agregara a Unity.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryMoneyContainer.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de agregar el componente de tipo <see cref="T:Proyecto.Item.ScientistLevel.MoneyContainer"/> a Unity.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryOperations">
            <summary>
            Esta clase es la resposable de agregar los componentes Operation al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryOperations.engineGame">
            <summary>
            Instancia del motor general del juego.
            </summary>
        </member>
        <member name="F:Proyecto.Factory.Unity.UFactoryOperations.operations">
            <summary>
            Operacion.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryOperations.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Tiene la responsabilidad de asignarle la operacion a su respectivo motor de su nivel.
            No se creara el objeto en unity, debido a que las operaciones no son objetos, sino que una herramienta.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryRecipe">
            <summary>
            Esta clase es la resposable de agregar los componentes Recipe al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryRecipe.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Debido a que no crearemos un objeto Recipe en unity, esta clase no tiene ninguna responsabilidad,
            mas que asignarle al motor de unity el adaptador de tipo <see cref="T:Proyecto.Common.IMainViewAdapter"/>.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Factory.Unity.UFactoryWorld">
            <summary>
            Esta clase es la resposable de agregar los componentes World al juego.
            Hereda de la Clase abstracta <see cref="T:Proyecto.Factory.Unity.FactoryUnity"/>.
            </summary>
        </member>
        <member name="M:Proyecto.Factory.Unity.UFactoryWorld.MakeUnityItem(Proyecto.Common.IMainViewAdapter,Proyecto.LibraryModelado.IComponent)">
            <summary>
            Sobrescribe el metodo abstracto de FactoryUnity.
            Debido a que no crearemos un objeto World en unity, esta clase no tiene ninguna responsabilidad,
            mas que asignarle al motor de unity el adaptador de tipo <see cref="T:Proyecto.Common.IMainViewAdapter"/>.
            </summary>
            <param name="adapter">Adapter <see cref="T:Proyecto.Common.IMainViewAdapter"/>.</param>
            <param name="component">Componente que se agregara a Unity <see cref="T:Proyecto.LibraryModelado.IComponent"/>.</param>
        </member>
        <member name="T:Proyecto.Item.Button">
            <summary>
            Clase responsable de crear botones genericos, no tienen ninguna funcionalidad.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>, e implementa la interfaz <see cref="T:Proyecto.LibraryModelado.IButton"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.Button.evento">
            <summary>
            Accion del boton.
            </summary>
        </member>
        <member name="M:Proyecto.Item.Button.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.String)">
            <summary>
            Initializes a new instance of Button.
            </summary>
            <param name="name">Nombre del boton.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del boton.</param>
            <param name="color">Color del boton en Hexadecimal.</param>
        </member>
        <member name="P:Proyecto.Item.Button.Pushable">
            <summary>
            Gets or sets indicating whether el boton es presionable.
            Por defecto es true.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="P:Proyecto.Item.Button.Color">
            <summary>
            Gets or sets del Color del Boton.
            </summary>
            <value>string codigo en hexadecimal.</value>
        </member>
        <member name="P:Proyecto.Item.Button.Event">
            <summary>
            Gets or sets del evento del boton.
            </summary>
            <value>Action.</value>
        </member>
        <member name="M:Proyecto.Item.Button.Click(System.String)">
            <summary>
            Accion realizada por el boton.
            </summary>
            <param name="text">Sin funcionalidad.</param>
        </member>
        <member name="T:Proyecto.Item.ButtonAudio">
            <summary>
            Clase responsable de crear botones, con la funcionalidad de reproducir un audio en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>, e implementa la interfaz <see cref="T:Proyecto.LibraryModelado.IButton"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.ButtonAudio.evento">
            <summary>
            Accion de reproducir el sonido.
            </summary>
        </member>
        <member name="M:Proyecto.Item.ButtonAudio.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de ButtonAudio.
            </summary>
            <param name="name">Nombre del boton.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del boton.</param>
            <param name="color">Color del boton en Hexadecimal.</param>
            <param name="audioFile">Audio a reproducir por el boton.</param>
        </member>
        <member name="P:Proyecto.Item.ButtonAudio.Pushable">
            <summary>
            Gets or sets indicating whether el boton es presionable.
            Por defecto es true.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="P:Proyecto.Item.ButtonAudio.Color">
            <summary>
            Gets or sets del Color del Boton.
            </summary>
            <value>string codigo en hexadecimal.</value>
        </member>
        <member name="P:Proyecto.Item.ButtonAudio.AudioFile">
            <summary>
            Gets or sets del Audio del boton.
            </summary>
            <value>string nombre del audio.</value>
        </member>
        <member name="P:Proyecto.Item.ButtonAudio.Event">
            <summary>
            Gets or sets del evento del boton.
            </summary>
            <value>Action.</value>
        </member>
        <member name="M:Proyecto.Item.ButtonAudio.Click(System.String)">
            <summary>
            Acciones realizadas por el boton.
            </summary>
            <param name="text">Sin funcionalidad.</param>
        </member>
        <member name="T:Proyecto.Item.ButtonGoToPage">
            <summary>
            Clase responsable de crear botones, con la funcionalidad de mostrar una pagina diferente en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>, e implementa la interfaz <see cref="T:Proyecto.LibraryModelado.IButton"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.ButtonGoToPage.evento">
            <summary>
            Accion de mostrar otra pagina.
            </summary>
        </member>
        <member name="M:Proyecto.Item.ButtonGoToPage.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String)">
            <summary>
            CInitializes a new instance of ButtonGoToPage.
            </summary>
            <param name="name">Nombre del boton.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del boton.</param>
            <param name="color">Color del boton en Hexadecimal.</param>
            <param name="pageName">Pagina para mostrar.</param>
        </member>
        <member name="P:Proyecto.Item.ButtonGoToPage.Pushable">
            <summary>
            Gets or sets indicating whether el boton es presionable.
            Por defecto es true.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="P:Proyecto.Item.ButtonGoToPage.Color">
            <summary>
            Gets or sets del Color del Boton.
            </summary>
            <value>string codigo en hexadecimal.</value>
        </member>
        <member name="P:Proyecto.Item.ButtonGoToPage.PageName">
            <summary>
            Gets or sets de la pagina a mostrar.
            </summary>
            <value>string nombre del la pagina.</value>
        </member>
        <member name="P:Proyecto.Item.ButtonGoToPage.Event">
            <summary>
            Gets or sets del evento del boton.
            </summary>
            <value>Action.</value>
        </member>
        <member name="M:Proyecto.Item.ButtonGoToPage.Click(System.String)">
            <summary>
            Acciones realizadas por el boton.
            Busca el nivel que coincida con el nivel que mostrara al ser apretado, y obtiene su ID.
            </summary>
            <param name="text">Sin funcionalidad.</param>
        </member>
        <member name="T:Proyecto.Item.ButtonStartLevel">
            <summary>
            Clase responsable de crear botones, con la funcionalidad de mostrar una pagina diferente en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>, e implementa la interfaz <see cref="T:Proyecto.LibraryModelado.IButton"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.ButtonStartLevel.evento">
            <summary>
            Accion de mostrar otra pagina.
            </summary>
        </member>
        <member name="M:Proyecto.Item.ButtonStartLevel.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String)">
            <summary>
            CInitializes a new instance of ButtonGoToPage.
            </summary>
            <param name="name">Nombre del boton.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del boton.</param>
            <param name="color">Color del boton en Hexadecimal.</param>
            <param name="levelName">Pagina para mostrar.</param>
        </member>
        <member name="P:Proyecto.Item.ButtonStartLevel.Pushable">
            <summary>
            Gets or sets indicating whether el boton es presionable.
            Por defecto es true.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="P:Proyecto.Item.ButtonStartLevel.Color">
            <summary>
            Gets or sets del Color del Boton.
            </summary>
            <value>string codigo en hexadecimal.</value>
        </member>
        <member name="P:Proyecto.Item.ButtonStartLevel.LevelName">
            <summary>
            Gets or sets de la pagina a mostrar.
            </summary>
            <value>string nombre del la pagina.</value>
        </member>
        <member name="P:Proyecto.Item.ButtonStartLevel.Event">
            <summary>
            Gets or sets del evento del boton.
            </summary>
            <value>Action.</value>
        </member>
        <member name="M:Proyecto.Item.ButtonStartLevel.Click(System.String)">
            <summary>
            Acciones realizadas por el boton.
            Busca el nivel que coincida con el nivel que mostrara al ser apretado, y obtiene su ID.
            </summary>
            <param name="text">Sin funcionalidad.</param>
        </member>
        <member name="T:Proyecto.Item.DragContainer">
            <summary>
            Clase responsable de crear containers para items arrastrables en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="M:Proyecto.Item.DragContainer.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Initializes a new instance of DragContainer.
            </summary>
            <param name="name">Nombre del container.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del container.</param>
        </member>
        <member name="P:Proyecto.Item.DragContainer.SavedItems">
            <summary>
            Gets la lista de objetos items que son soltados dentro del container.
            </summary>
            <value>Lista de items.</value>
        </member>
        <member name="T:Proyecto.Item.DraggableItem">
            <summary>
            Clase responsable de crear items arrastrables en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.DraggableItem.onDrop">
            <summary>
            Accion que se ejecutara al soltar un item.
            </summary>
        </member>
        <member name="M:Proyecto.Item.DraggableItem.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.Boolean,Proyecto.LibraryModelado.IContainer)">
            <summary>
            Initializes a new instance of DraggableItem.
            </summary>
            <param name="name">Nombre del Item.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del Item.</param>
            <param name="draggable">Bool que define si es arrastrable.</param>
            <param name="container">Container en donde es creado el item.</param>
        </member>
        <member name="P:Proyecto.Item.DraggableItem.Container">
            <summary>
            Gets or sets del container.
            </summary>
            <value><see cref="T:Proyecto.LibraryModelado.Items"/>.</value>
        </member>
        <member name="P:Proyecto.Item.DraggableItem.Draggable">
            <summary>
            Gets or sets a value indicating whether el item es arrastrable.
            </summary>
            <value>Bool arrastrable.</value>
        </member>
        <member name="P:Proyecto.Item.DraggableItem.OnDrop">
            <summary>
            Gets or sets de la accion a realizar al soltar el item.
            </summary>
            <value>Action.</value>
        </member>
        <member name="M:Proyecto.Item.DraggableItem.Drop(Proyecto.LibraryModelado.IContainer)">
            <summary>
            Accion realizada al soltar el Item.
            </summary>
        </member>
        <member name="T:Proyecto.Item.Feedback">
            <summary>
            Clase responsable de crear feedbacks en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="M:Proyecto.Item.Feedback.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of Feedback.
            </summary>
            <param name="name">Nombre del texto.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del texto.</param>
            <param name="text">Texto de la etiqueta.</param>
            <param name="size">Tamaño del texto.</param>
            <param name="bold">Bool si el texto es en bold.</param>
            <param name="italic">Bool si el texto es en italic.</param>
        </member>
        <member name="P:Proyecto.Item.Feedback.Text">
            <summary>
            Gets or sets del texto.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyecto.Item.Feedback.Size">
            <summary>
            Gets or sets del Tamaño del texto.
            </summary>
            <value>Int.</value>
        </member>
        <member name="P:Proyecto.Item.Feedback.Bold">
            <summary>
            Gets or sets indicating whether el texto va en bold.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="P:Proyecto.Item.Feedback.Italic">
            <summary>
            Gets or sets indicating whether el texto va en italics.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="T:Proyecto.Item.Image">
            <summary>
            Clase responsable de crear imagenes en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="M:Proyecto.Item.Image.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Initializes a new instance of Image.
            </summary>
            <param name="name">Nombre de la imagen.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen de la imagen.</param>
        </member>
        <member name="T:Proyecto.Item.InputText">
            <summary>
            Clase responsable de crear InputText en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.InputText.onChange">
            <summary>
            Método a ejecutar cuando se cambia el texto de la entrada de texto.
            </summary>
        </member>
        <member name="F:Proyecto.Item.InputText.onEdited">
            <summary>
            Método a ejecutar cuando se termina de editar el texto de la entrada de texto.
            </summary>
        </member>
        <member name="M:Proyecto.Item.InputText.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of InputText.
            </summary>
            <param name="name">Nombre de la imagen.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del input.</param>
            <param name="size">Tamaño del texto.</param>
            <param name="bold">Bool si el texto es en bold.</param>
            <param name="italic">Bool si el texto es en italic.</param>
        </member>
        <member name="P:Proyecto.Item.InputText.CurrentText">
            <summary>
            Gets or sets del texto que se encuentra actualmente en el input text.
            </summary>
            <value></value>
        </member>
        <member name="P:Proyecto.Item.InputText.Size">
            <summary>
            Gets or sets del Tamaño del texto.
            </summary>
            <value>Int.</value>
        </member>
        <member name="P:Proyecto.Item.InputText.Bold">
            <summary>
            Gets or sets indicating whether el texto va en bold.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="P:Proyecto.Item.InputText.Italic">
            <summary>
            Gets or sets indicating whether el texto va en italics.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="M:Proyecto.Item.InputText.Edit(System.String,System.String)">
            <summary>
            Action a ejecutar cuando se termine de editar un texto.
            </summary>
            <param name="itemID">Id del objeto.</param>
            <param name="text">Nuevo texto.</param>
        </member>
        <member name="M:Proyecto.Item.InputText.Change(System.String,System.String)">
            <summary>
            Metodo a ejecutar cuando se vaya cambiando un texto.
            No contiene funcionalidad debido a que no es necesario.
            </summary>
            <param name="itemID">Id del objeto.</param>
            <param name="text">Texto del objeto.</param>
        </member>
        <member name="T:Proyecto.Item.KitchenLevel.Bowl">
            <summary>
            Clase responsable de crear containers para alimentos en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="M:Proyecto.Item.KitchenLevel.Bowl.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            Initializes a new instance of Bowl.
            </summary>
            <param name="name">Nombre del Item.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del Item.</param>
        </member>
        <member name="P:Proyecto.Item.KitchenLevel.Bowl.SavedItems">
            <summary>
            Gets lista de objetos Food, que seran soltados dentro del container.
            </summary>
            <value>Alimentos <see cref="T:Proyecto.Item.KitchenLevel.Food"/>.</value>
        </member>
        <member name="T:Proyecto.Item.KitchenLevel.Food">
            <summary>
            Clase responsable de crear objetos de alimentos arrastrables en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.KitchenLevel.Food.type">
            <summary>
            Tipo de Food
            </summary>        
        </member>
        <member name="M:Proyecto.Item.KitchenLevel.Food.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.Boolean,Proyecto.LibraryModelado.IContainer,System.String)">
            <summary>
            Initializes a new instance of Food.
            </summary>
            <param name="name">Nombre del Food.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del Food.</param>
            <param name="draggable">Bool que define si es arrastrable.</param>
            <param name="container">Container Source en donde es creado.</param>
            <param name="type">String del tipo de Food.</param>
        </member>
        <member name="P:Proyecto.Item.KitchenLevel.Food.Type">
            <summary>
            Gets or sets del type.
            </summary>
            <value>Tipo de fruta.</value>
        </member>
        <member name="P:Proyecto.Item.KitchenLevel.Food.Container">
            <summary>
            Gets or sets del container.
            </summary>
            <value><see cref="T:Proyecto.LibraryModelado.Items"/>.</value>
        </member>
        <member name="P:Proyecto.Item.KitchenLevel.Food.Draggable">
            <summary>
            Gets or sets a value indicating whether el item es arrastrable.
            </summary>
            <value>Bool arrastrable.</value>
        </member>
        <member name="M:Proyecto.Item.KitchenLevel.Food.Drop(Proyecto.LibraryModelado.IContainer)">
            <summary>
            Accion realizada al soltar el alimento.
            </summary>
        </member>
        <member name="T:Proyecto.Item.KitchenLevel.Recipe">
            <summary>
            Clase responsable de crear recetas en el modelado.
            </summary>
        </member>
        <member name="M:Proyecto.Item.KitchenLevel.Recipe.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Collections.Generic.List{Proyecto.Item.KitchenLevel.Food})">
            <summary>
            Initializes a new instance of Recipe.
            </summary>
            <param name="name">Nombre del Item.</param>
            <param name="level">Level que contiene la recipe.</param>
            <param name="foodList">Lista de alimentos.</param>
        </member>
        <member name="P:Proyecto.Item.KitchenLevel.Recipe.FoodList">
            <summary>
            Gets lista de objetos Food, que deberan ser soltados dentro del container para ganar el juego.
            </summary>
            <value>Alimentos<see cref="T:Proyecto.Item.KitchenLevel.Food"/>.</value>
        </member>
        <member name="P:Proyecto.Item.KitchenLevel.Recipe.Name">
            <summary>
            Gets y Sets del Nombre de la receta.
            </summary>
            <value>ID</value>
        </member>
        <member name="T:Proyecto.Item.Label">
            <summary>
            Clase responsable de crear etiquetas en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="M:Proyecto.Item.Label.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of Label.
            </summary>
            <param name="name">Nombre del texto.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del texto.</param>
            <param name="text">Texto de la etiqueta.</param>
            <param name="size">Tamaño del texto.</param>
            <param name="bold">Bool si el texto es en bold.</param>
            <param name="italic">Bool si el texto es en italic.</param>
        </member>
        <member name="P:Proyecto.Item.Label.Text">
            <summary>
            Gets or sets del texto.
            </summary>
            <value>string text.</value>
        </member>
        <member name="P:Proyecto.Item.Label.Size">
            <summary>
            Gets or sets del Tamaño del texto.
            </summary>
            <value>Int.</value>
        </member>
        <member name="P:Proyecto.Item.Label.Bold">
            <summary>
            Gets or sets indicating whether el texto va en bold.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="P:Proyecto.Item.Label.Italic">
            <summary>
            Gets or sets indicating whether el texto va en italics.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="T:Proyecto.Item.InputVerifyText">
            <summary>
            Clase responsable de crear InputVerifyText en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="M:Proyecto.Item.InputVerifyText.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of InputVerifyText.
            </summary>
            <param name="name">Nombre de la imagen.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del input.</param>
            <param name="acceptableValue">Valor que aceptara el input.</param>
            <param name="size">Tamaño del texto.</param>
            <param name="bold">Bool si el texto es en bold.</param>
            <param name="italic">Bool si el texto es en italic.</param>
        </member>
        <member name="P:Proyecto.Item.InputVerifyText.Size">
            <summary>
            Gets or sets del Tamaño del texto.
            </summary>
            <value>Int.</value>
        </member>
        <member name="P:Proyecto.Item.InputVerifyText.Bold">
            <summary>
            Gets or sets indicating whether el texto va en bold.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="P:Proyecto.Item.InputVerifyText.Italic">
            <summary>
            Gets or sets indicating whether el texto va en italics.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="P:Proyecto.Item.InputVerifyText.AcceptableValue">
            <summary>
            Gets or sets del valor que aceptara el input.
            </summary>
            <value>string.</value>
        </member>
        <member name="P:Proyecto.Item.InputVerifyText.CurrentText">
            <summary>
            Gets or sets del texto que se encuentra actualmente en el input text.
            </summary>
            <value></value>
        </member>
        <member name="M:Proyecto.Item.InputVerifyText.Edit(System.String,System.String)">
            <summary>
            Action a ejecutar cuando se termine de editar un InputVerifyText.
            </summary>
            <param name="itemID">Id del objeto.</param>
            <param name="text">Nuevo texto.</param>
        </member>
        <member name="M:Proyecto.Item.InputVerifyText.Change(System.String,System.String)">
            <summary>
            Metodo a ejecutar cuando se vaya cambiando un texto.
            No contiene funcionalidad debido a que no es necesario.
            </summary>
            <param name="itemID">Id del objeto.</param>
            <param name="text">Texto del objeto.</param>
        </member>
        <member name="T:Proyecto.Item.ButtonShowImage">
            <summary>
            Clase responsable de crear botones del tipo showimage , con la funcionalidad de mostrar la imagen correspondiente.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>, e implementa la interfaz <see cref="T:Proyecto.LibraryModelado.IButton"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.ButtonShowImage.evento">
            <summary>
            Accion de mostrar otra pagina.
            </summary>
        </member>
        <member name="M:Proyecto.Item.ButtonShowImage.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String)">
            <summary>
            CInitializes a new instance of ButtonShowImage.
            </summary>
            <param name="name">Nombre del boton.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del boton.</param>
            <param name="color">Color del boton en Hexadecimal.</param>
            <param name="imageName">Pagina para mostrar.</param>
        </member>
        <member name="P:Proyecto.Item.ButtonShowImage.Pushable">
            <summary>
            Gets or sets indicating whether el boton es presionable.
            Por defecto es true.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="P:Proyecto.Item.ButtonShowImage.Color">
            <summary>
            Gets or sets del Color del Boton.
            </summary>
            <value>string codigo en hexadecimal.</value>
        </member>
        <member name="P:Proyecto.Item.ButtonShowImage.ImageName">
            <summary>
            Gets or sets de la imagen a mostrar.
            </summary>
            <value>string nombre del la imagen.</value>
        </member>
        <member name="P:Proyecto.Item.ButtonShowImage.Event">
            <summary>
            Gets or sets del evento del boton.
            </summary>
            <value>Action.</value>
        </member>
        <member name="M:Proyecto.Item.ButtonShowImage.Click(System.String)">
            <summary>
            Acciones realizadas por el boton.
            Busca el nivel que coincida con el nivel que mostrara al ser apretado, y obtiene su ID.
            </summary>
            <param name="text">Sin funcionalidad.</param>
        </member>
        <member name="T:Proyecto.Item.ScientistLevel.ButtonTrueFalse">
            <summary>
            Clase responsable de crear botones true false, utilizados en un ejercicio multipleopcion, solamente un boton
            sera el true (correcto).
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>, e implementa la interfaz <see cref="T:Proyecto.LibraryModelado.IButton"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.ScientistLevel.ButtonTrueFalse.evento">
            <summary>
            Accion del boton.
            </summary>
        </member>
        <member name="M:Proyecto.Item.ScientistLevel.ButtonTrueFalse.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of Button.
            </summary>
            <param name="name">Nombre del boton.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del boton.</param>
            <param name="color">Color del boton en Hexadecimal.</param>
            <param name="value">Opcion de verdadero o falso.</param>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.ButtonTrueFalse.Color">
            <summary>
            Gets or sets del Color del Boton.
            </summary>
            <value>string codigo en hexadecimal.</value>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.ButtonTrueFalse.Pushable">
            <summary>
            Gets or sets indicating whether el boton es presionable.
            Por defecto es true.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.ButtonTrueFalse.Value">
            <summary>
            Gets or sets a value indicating whether el valor del boton es el correcto.
            </summary>
            <value>Bool.</value>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.ButtonTrueFalse.Event">
            <summary>
            Gets or sets del evento del boton.
            </summary>
            <value>Action.</value>
        </member>
        <member name="M:Proyecto.Item.ScientistLevel.ButtonTrueFalse.Click(System.String)">
            <summary>
            Accion realizada por el boton.
            </summary>
            <param name="text">Sin funcionalidad.</param>
        </member>
        <member name="T:Proyecto.Item.ScientistLevel.Money">
            <summary>
            Clase responsable de crear dinero arrastrable en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="F:Proyecto.Item.ScientistLevel.Money.valor">
            <summary>
            Valor del dinero.
            </summary>
        </member>
        <member name="F:Proyecto.Item.ScientistLevel.Money.onDropMoney">
            <summary>
            Valor del dinero.
            </summary>
        </member>
        <member name="M:Proyecto.Item.ScientistLevel.Money.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.Boolean,Proyecto.LibraryModelado.IContainer,System.Single)">
            <summary>
            Initializes a new instance of Money.
            </summary>
            <param name="name">Nombre de la moneda.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen de la moneda.</param>
            <param name="draggable">Bool que define si es arrastrable.</param>
            <param name="container">Container Source en donde es creado.</param>
            <param name="valor">Valor de la moneda.</param>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.Money.Value">
            <summary>
            Gets or sets del valor de la moneda.
            En caso que, la moneda sea de un valor negativo, se vuelve positivo.
            </summary>
            <value>float valor de la moneda.</value>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.Money.Container">
            <summary>
            Gets or sets del container en el que se encuentra.
            </summary>
            <value><see cref="T:Proyecto.Item.DragContainer"/>.</value>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.Money.Draggable">
            <summary>
            Gets or sets a value indicating whether el item es arrastrable.
            </summary>
            <value>Bool arrastrable.</value>
        </member>
        <member name="M:Proyecto.Item.ScientistLevel.Money.Drop(Proyecto.LibraryModelado.IContainer)">
            <summary>
            Accion realizada al soltar el dinero.
            </summary>
            <param name="moneyContainer">Container donde es soltado el dinero.</param>
            <returns>Bool si es el dinero correcto.</returns>
        </member>
        <member name="T:Proyecto.Item.ScientistLevel.MoneyContainer">
            <summary>
            Clase responsable de crear containers de dinero arrastrable en el modelado.
            Hereda de la clase abstracta <see cref="T:Proyecto.LibraryModelado.Items"/>.
            </summary>
        </member>
        <member name="M:Proyecto.Item.ScientistLevel.MoneyContainer.#ctor(System.String,Proyecto.LibraryModelado.Space,System.Single,System.Single,System.Single,System.Single,System.String,System.Single)">
            <summary>
            Initializes a new instance of MoneyContainer.
            </summary>
            <param name="name">Nombre del container.</param>
            <param name="level">Nivel al que pertence.</param>
            <param name="positionX">Posicion en eje horizontal en pixeles.</param>
            <param name="positionY">Posicion en eje vertical en pixeles.</param>
            <param name="width">Ancho en pixeles.</param>
            <param name="height">Altura en pixeles.</param>
            <param name="image">Imagen del container.</param>
            <param name="acceptableValue">Valor de dinero que aceptara el container.</param>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.MoneyContainer.AcceptableValue">
            <summary>
            Gets or sets del valor monetario aceptado por el container.
            </summary>
            <value>float valor aceptado.</value>
        </member>
        <member name="P:Proyecto.Item.ScientistLevel.MoneyContainer.SavedItems">
            <summary>
            Gets or sets de objetos Money soltado dentro del container.
            </summary>
            <value>Money.</value>
        </member>
    </members>
</doc>
